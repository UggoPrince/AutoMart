{"version":3,"sources":["../../../server/models/Cars.js"],"names":["dotenv","config","cloudinary","cloudiner","v2","cloud_name","process","env","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","db","Database","Cars","carData","carPhoto","uploadImage","uploadedImg","queryString","owner","state","status","price","title","manufacturer","model","bodyType","url","query","result","rows","id","created_on","body_type","photos","email","filePath","photo","path","uploader","upload","folder","CLOUDINARY_AUTOMART_FOLDER","use_filename","err","getCarById","min","max","field","carId","value","ownerEmail","carStatus","newStatus","toLowerCase","updater","newPrice"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;;;;;;;;;;;;;AAEAA,mBAAOC,MAAP;;AACA,IAAMC,UAAU,GAAGC,uBAAUC,EAA7B,C,CACA;;AACAF,UAAU,CAACD,MAAX,CAAkB;AAChBI,EAAAA,UAAU,EAAEC,OAAO,CAACC,GAAR,CAAYC,qBADR;AAEhBC,EAAAA,OAAO,EAAEH,OAAO,CAACC,GAAR,CAAYG,kBAFL;AAGhBC,EAAAA,UAAU,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHR,CAAlB;AAMA,IAAMC,EAAE,GAAG,IAAIC,oBAAJ,EAAX;;IAEMC,I;;;;;;;;;;;;+CACaC,O,EAASC,Q;;;;;;;;uBAEE,KAAKC,WAAL,CAAiBD,QAAjB,C;;;AAApBE,gBAAAA,W;AACAC,gBAAAA,W,iKAKCJ,OAAO,CAACK,K,iBAAYL,OAAO,CAACM,K,iBAAYN,OAAO,CAACO,M,0BAChDP,OAAO,CAACQ,K,iBAAYR,OAAO,CAACS,K,iBAAYT,OAAO,CAACU,Y,0BAChDV,OAAO,CAACW,K,iBAAYX,OAAO,CAACY,Q,kBAAgBT,WAAW,CAACU,G;;uBAI1ChB,EAAE,CAACiB,KAAH,CAASV,WAAT,C;;;AAAfW,gBAAAA,M;gCAGFA,MAAM,CAACC,IAAP,CAAY,CAAZ,C,EADFC,E,iBAAAA,E,EAAIC,U,iBAAAA,U,EAAYZ,K,iBAAAA,K,EAAOC,M,iBAAAA,M,EAAQC,K,iBAAAA,K,EAAOC,K,iBAAAA,K,EAAOC,Y,iBAAAA,Y,EAAcC,K,iBAAAA,K,EAAOQ,S,iBAAAA,S,EAAWC,M,iBAAAA,M;AAE/EL,gBAAAA,MAAM,CAACC,IAAP,CAAY,CAAZ,IAAiB;AACfC,kBAAAA,EAAE,EAAFA,EADe;AAEfI,kBAAAA,KAAK,EAAErB,OAAO,CAACqB,KAFA;AAGfH,kBAAAA,UAAU,EAAVA,UAHe;AAIfZ,kBAAAA,KAAK,EAALA,KAJe;AAKfC,kBAAAA,MAAM,EAANA,MALe;AAMfC,kBAAAA,KAAK,EAALA,KANe;AAOfC,kBAAAA,KAAK,EAALA,KAPe;AAQfC,kBAAAA,YAAY,EAAZA,YARe;AASfC,kBAAAA,KAAK,EAALA,KATe;AAUfQ,kBAAAA,SAAS,EAATA,SAVe;AAWfC,kBAAAA,MAAM,EAANA;AAXe,iBAAjB;iDAaOL,M;;;;;;;;;;;;;;;;;;;;;gDAGSd,Q;;;;;;AACVqB,gBAAAA,Q,GAAWrB,QAAQ,CAACsB,KAAT,CAAeC,I;;uBACNtC,UAAU,CAACuC,QAAX,CAAoBC,MAApB,CAA2BJ,QAA3B,EAAqC;AAC7DK,kBAAAA,MAAM,EAAErC,OAAO,CAACC,GAAR,CAAYqC,0BADyC;AAE7DC,kBAAAA,YAAY,EAAE;AAF+C,iBAArC,EAGvB,UAACC,GAAD,EAAMf,MAAN;AAAA,yBAAiBA,MAAjB;AAAA,iBAHuB,C;;;AAApBZ,gBAAAA,W;kDAICA,W;;;;;;;;;;;;;;;;;;;;;gDAGQc,E;;;;;;AACTb,gBAAAA,W,4CAAgDa,E;;uBACjCpB,EAAE,CAACiB,KAAH,CAASV,WAAT,C;;;AAAfW,gBAAAA,M;kDACCA,M;;;;;;;;;;;;;;;;;;;;;gDAGKE,E;;;;;;;uBACS,KAAKc,UAAL,CAAgBd,EAAhB,C;;;AAAfF,gBAAAA,M;kDACCA,M;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIDX,gBAAAA,W,GAAc,qB;;uBACCP,EAAE,CAACiB,KAAH,CAASV,WAAT,C;;;AAAfW,gBAAAA,M;kDACCA,M;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIDX,gBAAAA,W,GAAc,kD;AACdW,gBAAAA,M,GAASlB,EAAE,CAACiB,KAAH,CAASV,WAAT,C;kDACRW,M;;;;;;;;;;;;;;;;;;;;;gDAG0BiB,G,EAAKC,G;;;;;;AAChC7B,gBAAAA,W,oFACgB4B,G,kBAAWC,G;AAC3BlB,gBAAAA,M,GAASlB,EAAE,CAACiB,KAAH,CAASV,WAAT,C;kDACRW,M;;;;;;;;;;;;;;;;;;;;;gDAGqBmB,K,EAAO5B,K;;;;;;AAC7BF,gBAAAA,W,sEACE8B,K,iBAAY5B,K;AACdS,gBAAAA,M,GAASlB,EAAE,CAACiB,KAAH,CAASV,WAAT,C;kDACRW,M;;;;;;;;;;;;;;;;;;;;;gDAG4BmB,K,EAAOxB,Y;;;;;;AACpCN,gBAAAA,W,sEACE8B,K,kBAAaxB,Y;AACfK,gBAAAA,M,GAASlB,EAAE,CAACiB,KAAH,CAASV,WAAT,C;kDACRW,M;;;;;;;;;;;;;;;;;;;;;iDAGKoB,K,EAAOD,K,EAAOE,K,EAAOC,U;;;;;;;AAC3BjC,gBAAAA,W,6BAAiC8B,K,iBAAYE,K,gCACrCD,K;;uBACOtC,EAAE,CAACiB,KAAH,CAASV,WAAT,C;;;AAAfW,gBAAAA,M;iCAIFA,MAAM,CAACC,IAAP,CAAY,CAAZ,C,EADFC,E,kBAAAA,E,EAAIC,U,kBAAAA,U,EAAYZ,K,kBAAAA,K,EAAOC,M,kBAAAA,M,EAAQC,K,kBAAAA,K,EAAOC,K,kBAAAA,K,EAAOC,Y,kBAAAA,Y,EAAcC,K,kBAAAA,K,EAAOQ,S,kBAAAA,S,EAAWC,M,kBAAAA,M;AAE/EL,gBAAAA,MAAM,CAACC,IAAP,CAAY,CAAZ,IAAiB;AACfC,kBAAAA,EAAE,EAAFA,EADe;AAEfI,kBAAAA,KAAK,EAAEgB,UAFQ;AAGfnB,kBAAAA,UAAU,EAAVA,UAHe;AAIfZ,kBAAAA,KAAK,EAALA,KAJe;AAKfC,kBAAAA,MAAM,EAANA,MALe;AAMfC,kBAAAA,KAAK,EAALA,KANe;AAOfC,kBAAAA,KAAK,EAALA,KAPe;AAQfC,kBAAAA,YAAY,EAAZA,YARe;AASfC,kBAAAA,KAAK,EAALA,KATe;AAUfQ,kBAAAA,SAAS,EAATA,SAVe;AAWfC,kBAAAA,MAAM,EAANA;AAXe,iBAAjB;mDAaOL,M;;;;;;;;;;;;;;;;;;;;;iDAGUf,O;;;;;;AACXsC,gBAAAA,S,GAAYtC,OAAO,CAACuC,SAAR,CAAkBC,WAAlB,E;;uBACG,KAAKC,OAAL,CAAazC,OAAO,CAACmC,KAArB,EAA4B,QAA5B,EAAsCG,SAAtC,EAAiDtC,OAAO,CAACqB,KAAzD,C;;;AAAfN,gBAAAA,M;mDACCA,M;;;;;;;;;;;;;;;;;;;;;iDAGSf,O;;;;;;;uBACK,KAAKyC,OAAL,CAAazC,OAAO,CAACmC,KAArB,EAA4B,OAA5B,EAAqCnC,OAAO,CAAC0C,QAA7C,EAAuD1C,OAAO,CAACqB,KAA/D,C;;;AAAfN,gBAAAA,M;mDACCA,M;;;;;;;;;;;;;;;;;;;;;iDAGUoB,K;;;;;;AACX/B,gBAAAA,W,yCAA6C+B,K;;uBAC9BtC,EAAE,CAACiB,KAAH,CAASV,WAAT,C;;;AAAfW,gBAAAA,M;mDACCA,M;;;;;;;;;;;;;;;;;;;;;eAII,IAAIhB,IAAJ,E","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable camelcase */\r\nimport cloudiner from 'cloudinary';\r\nimport dotenv from 'dotenv';\r\nimport Database from '../database/Database';\r\n\r\ndotenv.config();\r\nconst cloudinary = cloudiner.v2;\r\n// cloudinary configuration\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nconst db = new Database();\r\n\r\nclass Cars {\r\n  async postAdvert(carData, carPhoto) {\r\n    // check if user for this car exist\r\n    const uploadedImg = await this.uploadImage(carPhoto);\r\n    const queryString = `\r\n      INSERT INTO cars (\r\n        owner, state, status, price, title, manufacturer, model, body_type, photos\r\n        )\r\n      VALUES (\r\n        '${carData.owner}', '${carData.state}', '${carData.status}',\r\n        '${carData.price}', '${carData.title}', '${carData.manufacturer}',\r\n        '${carData.model}', '${carData.bodyType}', '{${uploadedImg.url}}'\r\n      )\r\n      RETURNING *;\r\n    `;\r\n    const result = await db.query(queryString);\r\n    const {\r\n      id, created_on, state, status, price, title, manufacturer, model, body_type, photos,\r\n    } = result.rows[0];\r\n    result.rows[0] = {\r\n      id,\r\n      email: carData.email,\r\n      created_on,\r\n      state,\r\n      status,\r\n      price,\r\n      title,\r\n      manufacturer,\r\n      model,\r\n      body_type,\r\n      photos,\r\n    };\r\n    return result;\r\n  }\r\n\r\n  async uploadImage(carPhoto) {\r\n    const filePath = carPhoto.photo.path;\r\n    const uploadedImg = await cloudinary.uploader.upload(filePath, {\r\n      folder: process.env.CLOUDINARY_AUTOMART_FOLDER,\r\n      use_filename: true,\r\n    }, (err, result) => result);\r\n    return uploadedImg;\r\n  }\r\n\r\n  async getCarById(id) {\r\n    const queryString = `SELECT * FROM cars WHERE id = '${id}';`;\r\n    const result = await db.query(queryString);\r\n    return result;\r\n  }\r\n\r\n  async getACar(id) {\r\n    const result = await this.getCarById(id);\r\n    return result;\r\n  }\r\n\r\n  async getAllCars() {\r\n    const queryString = 'SELECT * FROM cars;';\r\n    const result = await db.query(queryString);\r\n    return result;\r\n  }\r\n\r\n  async getCarsByStatusAvailable() {\r\n    const queryString = 'SELECT * FROM cars WHERE status = \\'available\\';';\r\n    const result = db.query(queryString);\r\n    return result;\r\n  }\r\n\r\n  async getCarsByStatusAndPriceRange(min, max) {\r\n    const queryString = `SELECT * FROM cars WHERE status = 'available'\r\n      AND price BETWEEN ${min} AND ${max};`;\r\n    const result = db.query(queryString);\r\n    return result;\r\n  }\r\n\r\n  async getCarsByStatusAndState(field, state) {\r\n    const queryString = `SELECT * FROM cars WHERE status = 'available'\r\n      AND ${field} = '${state}';`;\r\n    const result = db.query(queryString);\r\n    return result;\r\n  }\r\n\r\n  async getCarsByStatusAndManufacturer(field, manufacturer) {\r\n    const queryString = `SELECT * FROM cars WHERE status = 'available'\r\n      AND ${field} ~* '${manufacturer}';`;\r\n    const result = db.query(queryString);\r\n    return result;\r\n  }\r\n\r\n  async updater(carId, field, value, ownerEmail) {\r\n    const queryString = `UPDATE cars SET ${field} = '${value}'\r\n    WHERE id = '${carId}' RETURNING *;`;\r\n    const result = await db.query(queryString);\r\n    const {\r\n      // eslint-disable-next-line no-unused-vars\r\n      id, created_on, state, status, price, title, manufacturer, model, body_type, photos,\r\n    } = result.rows[0];\r\n    result.rows[0] = {\r\n      id,\r\n      email: ownerEmail,\r\n      created_on,\r\n      state,\r\n      status,\r\n      price,\r\n      title,\r\n      manufacturer,\r\n      model,\r\n      body_type,\r\n      photos,\r\n    };\r\n    return result;\r\n  }\r\n\r\n  async updateStatus(carData) {\r\n    const carStatus = carData.newStatus.toLowerCase();\r\n    const result = await this.updater(carData.carId, 'status', carStatus, carData.email);\r\n    return result;\r\n  }\r\n\r\n  async updatePrice(carData) {\r\n    const result = await this.updater(carData.carId, 'price', carData.newPrice, carData.email);\r\n    return result;\r\n  }\r\n\r\n  async deleteAdvert(carId) {\r\n    const queryString = `DELETE FROM cars WHERE id ='${carId}';`;\r\n    const result = await db.query(queryString);\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default new Cars();\r\n"],"file":"Cars.js"}