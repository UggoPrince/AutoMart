{"version":3,"sources":["../../../server/models/Cars.js"],"names":["dotenv","config","cloudinary","cloudiner","v2","cloud_name","process","env","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","db","Database","Cars","carData","car_photo","img","str","image","uploadImage","uploadedImg","url","queryString","owner","state","status","price","title","manufacturer","model","body_type","query","result","rows","id","created_on","image_url","email","filePath","img_url","path","uploader","upload","folder","CLOUDINARY_AUTOMART_FOLDER","use_filename","err","min","max","field","car_id","value","ownerEmail","updater"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable camelcase */\nimport cloudiner from 'cloudinary';\nimport dotenv from 'dotenv';\nimport Database from '../database/Database';\n\ndotenv.config();\nconst cloudinary = cloudiner.v2;\n// cloudinary configuration\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\nconst db = new Database();\n\nclass Cars {\n  async postAdvert(carData, car_photo) {\n    // check if user for this car exist\n    let img = '';\n    if (car_photo.str) img = car_photo.image;\n    else if (!car_photo.str) {\n      const uploadedImg = await this.uploadImage(car_photo.image);\n      img = uploadedImg.url;\n    }\n    const queryString = `\n      INSERT INTO cars (\n        owner, state, status, price, title, manufacturer, model, body_type, image_url\n        )\n      VALUES (\n        '${carData.owner}', '${carData.state}', '${carData.status}',\n        '${carData.price}', '${carData.title}', '${carData.manufacturer}',\n        '${carData.model}', '${carData.body_type}', '${img}'\n      )\n      RETURNING *;\n    `;\n    const result = await db.query(queryString);\n    const {\n      id, created_on, state, status, price, title, manufacturer, model, body_type, image_url,\n    } = result.rows[0];\n    result.rows[0] = {\n      id,\n      email: carData.email,\n      created_on,\n      state,\n      status,\n      price,\n      title,\n      manufacturer,\n      model,\n      body_type,\n      image_url,\n    };\n    return result;\n  }\n\n  async uploadImage(car_photo) {\n    const filePath = car_photo.img_url.path;\n    const uploadedImg = await cloudinary.uploader.upload(filePath, {\n      folder: process.env.CLOUDINARY_AUTOMART_FOLDER,\n      use_filename: true,\n    }, (err, result) => result);\n    return uploadedImg;\n  }\n\n  async getCarById(id) {\n    const queryString = `SELECT * FROM cars WHERE id = '${id}';`;\n    const result = await db.query(queryString);\n    return result;\n  }\n\n  async getCarByOwner(owner) {\n    const queryString = `SELECT * FROM cars WHERE owner = ${owner};`;\n    const result = await db.query(queryString);\n    return result;\n  }\n\n  /* async getACar(id) {\n    const result = await this.getCarById(id);\n    return result;\n  } */\n\n  async getAllCars() {\n    const queryString = 'SELECT * FROM cars;';\n    const result = await db.query(queryString);\n    return result;\n  }\n\n  async getCarsByStatusAvailable() {\n    const queryString = 'SELECT * FROM cars WHERE status = \\'available\\';';\n    const result = db.query(queryString);\n    return result;\n  }\n\n  async getCarsByStatusAndPriceRange(min, max) {\n    const queryString = `SELECT * FROM cars WHERE status = 'available'\n      AND price BETWEEN ${min} AND ${max};`;\n    const result = db.query(queryString);\n    return result;\n  }\n\n  async getCarsByStatusAndState(field, state) {\n    const queryString = `SELECT * FROM cars WHERE status = 'available'\n      AND ${field} = '${state}';`;\n    const result = db.query(queryString);\n    return result;\n  }\n\n  async getCarsByStatusAndManufacturer(field, manufacturer) {\n    const queryString = `SELECT * FROM cars WHERE status = 'available'\n      AND ${field} ~* '${manufacturer}';`;\n    const result = db.query(queryString);\n    return result;\n  }\n\n  async updater(car_id, field, value, ownerEmail) {\n    const queryString = `UPDATE cars SET ${field} = '${value}'\n    WHERE id = '${car_id}' RETURNING *;`;\n    const result = await db.query(queryString);\n    const {\n      // eslint-disable-next-line no-unused-vars\n      id, created_on, state, status, price, title, manufacturer, model, body_type, image_url,\n    } = result.rows[0];\n    result.rows[0] = {\n      id,\n      email: ownerEmail,\n      created_on,\n      state,\n      status,\n      price,\n      title,\n      manufacturer,\n      model,\n      body_type,\n      image_url,\n    };\n    return result;\n  }\n\n  async updateStatus(carData) {\n    const result = await this.updater(carData.car_id, 'status', 'sold', carData.email);\n    return result;\n  }\n\n  async updatePrice(carData) {\n    const result = await this.updater(carData.car_id, 'price', carData.price, carData.email);\n    return result;\n  }\n\n  async deleteAdvert(car_id) {\n    const queryString = `DELETE FROM cars WHERE id ='${car_id}';`;\n    const result = await db.query(queryString);\n    return result;\n  }\n}\n\nexport default new Cars();\n"],"file":"Cars.js"}