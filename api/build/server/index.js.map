{"version":3,"sources":["../../server/index.js"],"names":["app","use","get","req","res","setHeader","send","swaggerSpec","swaggerUi","serve","setup","status","bodyParser","json","type","urlencoded","extended","next","header","usersRouter","carsRouter","ordersRouter","flagsRouter"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA,IAAMA,GAAG,GAAG,0BAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,uBAAR,E,CAAiB;;AACjBD,GAAG,CAACC,GAAJ,CAAQ,wBAAO,KAAP,CAAR,E,CAAwB;AAExB;;AACAD,GAAG,CAACE,GAAJ,CAAQ,eAAR,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrCA,EAAAA,GAAG,CAACC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAD,EAAAA,GAAG,CAACE,IAAJ,CAASC,sBAAT;AACD,CAHD;AAIAP,GAAG,CAACC,GAAJ,CAAQ,kBAAR,EAA4BO,6BAAUC,KAAtC,EAA6CD,6BAAUE,KAAV,CAAgBH,sBAAhB,CAA7C,E,CAEA;;AACAP,GAAG,CAACE,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB,sCACnB,gDADmB,GAEnB,8EAFmB,GAGnB,sDAHF;AAID,CALD,E,CAOA;;AACAN,GAAG,CAACC,GAAJ,CAAQW,uBAAWC,IAAX,EAAR;AACAb,GAAG,CAACC,GAAJ,CAAQW,uBAAWC,IAAX,CAAgB;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAhB,CAAR;AACAd,GAAG,CAACC,GAAJ,CAAQW,uBAAWG,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR,E,CAEA;;AAEAhB,GAAG,CAACC,GAAJ,CAAQ,UAACE,GAAD,EAAMC,GAAN,EAAWa,IAAX,EAAoB;AAC1Bb,EAAAA,GAAG,CAACc,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAd,EAAAA,GAAG,CAACc,MAAJ,CAAW,8BAAX,EAA2C,iCAA3C;AACAd,EAAAA,GAAG,CAACc,MAAJ,CAAW,8BAAX,EAA2C,+DAA3C;AACAD,EAAAA,IAAI;AACL,CALD;AAMAjB,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBkB,uBAApB;AACAnB,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBmB,sBAApB;AACApB,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBoB,wBAApB;AACArB,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBqB,uBAApB;AAEAtB,GAAG,CAACC,GAAJ,CAAQ,UAACE,GAAD,EAAMC,GAAN,EAAc;AACpBA,EAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB,WAArB;AACD,CAFD;eAIeb,G","sourcesContent":["import express from 'express';\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\nimport swaggerUi from 'swagger-ui-express';\nimport cors from 'cors';\nimport swaggerSpec from './swaggerDocs/config/swaggerDef';\nimport usersRouter from './routes/usersRoutes';\nimport carsRouter from './routes/carsRoutes';\nimport ordersRouter from './routes/ordersRoutes';\nimport flagsRouter from './routes/flagsRoutes';\n\n// Set up express app\nconst app = express();\n\napp.use(cors()); // for cross origin requests\napp.use(logger('dev')); // Log request to console\n\n// produce api documentation\napp.get('/swagger.json', (req, res) => {\n  res.setHeader('Content-Type', 'application/json');\n  res.send(swaggerSpec);\n});\napp.use('/api/v1/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\n// HOME PAGE\napp.get('/', (req, res) => {\n  res.status(200).send('<h1>Welcome to AutoMart API.</h1>'\n  + '<span>Here is the documentation of version 1.0'\n  + ' <a href=\"https://automarter.herokuapp.com/api/v1/api-docs/\" target=\"blank\">'\n  + 'automarter.herokuapp.com/api/v1/api-docs/</a></span>');\n});\n\n// Parse incoming request data\napp.use(bodyParser.json());\napp.use(bodyParser.json({ type: 'application/json' }));\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// app.options('*', cors());\n\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, PUT, POST, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n  next();\n});\napp.use('/api/v1/', usersRouter);\napp.use('/api/v1/', carsRouter);\napp.use('/api/v1/', ordersRouter);\napp.use('/api/v1/', flagsRouter);\n\napp.use((req, res) => {\n  res.status(404).json('Not Found');\n});\n\nexport default app;\n"],"file":"index.js"}