{"version":3,"sources":["../../../server/controllers/CarsController.js"],"names":["CarsController","req","res","body","owner","state","status","price","title","manufacturer","model","bodyType","myPhoto","files","validator","Validator","validCarReq","validateCreateAdvertFields","error","send","data","usersService","getUserById","parseInt","exist","ownerId","ownerEmail","email","carsService","createAdvert","addedCar","carId","params","car_id","validGetCarReq","validateGetSpecficCar","getCarById","id","car","rQuery","query","qLength","Object","keys","length","isZero","isOne","isTwo","isThree","allCars","getAllCars","validQuery","validateGetUnsoldCars","unsoldCars","getCarsByStatus","validate_Get_Unsold_Used_Cars","getCarsByStatusAndState","validate_Get_Unsold_Cars_By_Manufacturer","getCarsByStatusAndManufacturer","validateGetUnsoldCarsInPriceRange","min_price","max_price","unsoldCarsInPriceRange","getCarsByStatusAndPriceRange","newStatus","validUpdateReq","validateUpdateCarStatusFields","carOwner","getCarOwner","newStatusUpdate","updateStatus","newPrice","validUpdateCarPriceReq","validatUpdateCarPriceFields","newPriceUpdate","updatePrice","validDeleteCarReq","validateDeleteACar"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\nimport carsService from '../services/CarsService';\r\nimport Validator from '../helpers/ValidateCar';\r\nimport usersService from '../services/UsersService';\r\n\r\nclass CarsController {\r\n  async addCar(req, res) {\r\n    const {\r\n      owner, state, status, price, title, manufacturer, model, bodyType,\r\n    } = req.body;\r\n    const myPhoto = req.files;\r\n\r\n    const validator = new Validator();\r\n    const validCarReq = validator.validateCreateAdvertFields(\r\n      owner, state, status, price, title, manufacturer, model, bodyType, myPhoto,\r\n    );\r\n\r\n    if (validCarReq.error) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: validCarReq.data,\r\n      });\r\n    } else if (!usersService.getUserById(parseInt(owner, 10)).exist) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: 'Invalid owner',\r\n      });\r\n    } else {\r\n      const ownerId = parseInt(owner, 10);\r\n      const ownerEmail = usersService.getUserById(ownerId).data.email;\r\n      const addedCar = await carsService.createAdvert(\r\n        owner, state, status, price, title, manufacturer, model, bodyType, myPhoto, ownerEmail,\r\n      );\r\n      res.status(201).send({\r\n        status: 201,\r\n        data: addedCar.data,\r\n      });\r\n    }\r\n  }\r\n\r\n  getACar(req, res) {\r\n    const carId = req.params.car_id;\r\n    const validator = new Validator();\r\n    const validGetCarReq = validator.validateGetSpecficCar(carId);\r\n    if (validGetCarReq.error) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: validGetCarReq.data,\r\n      });\r\n    } else if (!carsService.getCarById(parseInt(carId, 10)).exist) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: 'Invalid carId. There is no car with this id.',\r\n      });\r\n    } else {\r\n      const id = parseInt(carId, 10);\r\n      const { car } = carsService.getCarById(id);\r\n      res.status(200).send({\r\n        status: 200,\r\n        data: car,\r\n      });\r\n    }\r\n  }\r\n\r\n  getCars(req, res) {\r\n    const rQuery = req.query;\r\n    const qLength = Object.keys(req.query).length;\r\n    const validator = new Validator();\r\n    const isZero = qLength === 0;\r\n    const isOne = qLength > 0 && qLength === 1;\r\n    const isTwo = qLength > 0 && qLength === 2;\r\n    const isThree = qLength > 0 && qLength === 3;\r\n\r\n    if (isZero) { // process request for admin view all car adverts\r\n      const allCars = carsService.getAllCars();\r\n      res.status(200).send({\r\n        status: 200,\r\n        data: allCars,\r\n      });\r\n    } else if (isOne) { // process request for getting unsold cars only\r\n      const validQuery = validator.validateGetUnsoldCars(rQuery.status);\r\n      if (validQuery.error) {\r\n        res.status(404).send({\r\n          status: 404,\r\n          error: validQuery.data,\r\n        });\r\n      } else {\r\n        const unsoldCars = carsService.getCarsByStatus(rQuery.status);\r\n        res.status(200).send({\r\n          status: 200,\r\n          data: unsoldCars,\r\n        });\r\n      }\r\n    } else if (isTwo) { // process request for getting new and used unsold cars\r\n      if (rQuery.state) {\r\n        const validQuery = validator.validate_Get_Unsold_Used_Cars(rQuery.status, rQuery.state);\r\n        if (validQuery.error) {\r\n          res.status(404).send({\r\n            status: 404,\r\n            error: validQuery.data,\r\n          });\r\n        } else {\r\n          const unsoldCars = carsService.getCarsByStatusAndState(rQuery.status, 'state', rQuery.state);\r\n          res.status(200).send({\r\n            status: 200,\r\n            data: unsoldCars,\r\n          });\r\n        }\r\n      } else if (rQuery.manufacturer) { // process request for getting unsold cars by manufacturer\r\n        const validQuery = validator.validate_Get_Unsold_Cars_By_Manufacturer(\r\n          rQuery.status, rQuery.manufacturer,\r\n        );\r\n        if (validQuery.error) {\r\n          res.status(404).send({\r\n            status: 404,\r\n            error: validQuery.data,\r\n          });\r\n        } else {\r\n          const unsoldCars = carsService.getCarsByStatusAndManufacturer(\r\n            rQuery.status, 'manufacturer', rQuery.manufacturer,\r\n          );\r\n          res.status(200).send({\r\n            status: 200,\r\n            data: unsoldCars,\r\n          });\r\n        }\r\n      } else {\r\n        res.status(404).send({\r\n          status: 404,\r\n          error: 'The query string (with its value) is not valid.',\r\n        });\r\n      }\r\n    } else if (isThree) { // process request for getting unsold cars on a certain price range\r\n      const validQuery = validator.validateGetUnsoldCarsInPriceRange(\r\n        rQuery.status, rQuery.min_price, rQuery.max_price,\r\n      );\r\n      if (validQuery.error) {\r\n        res.status(404).send({\r\n          status: 404,\r\n          error: validQuery.data,\r\n        });\r\n      } else {\r\n        const unsoldCarsInPriceRange = carsService.getCarsByStatusAndPriceRange(\r\n          rQuery.status, rQuery.min_price, rQuery.max_price,\r\n        );\r\n        res.status(200).send({\r\n          status: 200,\r\n          data: unsoldCarsInPriceRange,\r\n        });\r\n      }\r\n    } else {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: 'The query string (with its value) is not valid.',\r\n      });\r\n    }\r\n  }\r\n\r\n  updateCarStatus(req, res) {\r\n    const { newStatus } = req.body;\r\n    const carId = req.params.car_id;\r\n    const validator = new Validator();\r\n    const validUpdateReq = validator.validateUpdateCarStatusFields(carId, newStatus);\r\n    if (validUpdateReq.error) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: validUpdateReq.data,\r\n      });\r\n    } else if (!carsService.getCarById(parseInt(carId, 10)).exist) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: 'Invalid carId. There is no car with this id.',\r\n      });\r\n    } else {\r\n      const id = parseInt(carId, 10);\r\n      const carOwner = carsService.getCarOwner(id);\r\n      const ownerEmail = usersService.getUserById(carOwner).data.email;\r\n      const newStatusUpdate = carsService.updateStatus(id, newStatus, ownerEmail);\r\n      res.status(200).send({\r\n        status: 200,\r\n        data: newStatusUpdate,\r\n      });\r\n    }\r\n  }\r\n\r\n  updateCarPrice(req, res) {\r\n    const { newPrice } = req.body;\r\n    const carId = req.params.car_id;\r\n    const validator = new Validator();\r\n    const validUpdateCarPriceReq = validator.validatUpdateCarPriceFields(carId, newPrice);\r\n    if (validUpdateCarPriceReq.error) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: validUpdateCarPriceReq.data,\r\n      });\r\n    } else if (!carsService.getCarById(parseInt(carId, 10)).exist) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: 'Invalid carId. There is no car with this id.',\r\n      });\r\n    } else {\r\n      const id = parseInt(carId, 10);\r\n      const carOwner = carsService.getCarOwner(id);\r\n      const ownerEmail = usersService.getUserById(carOwner).data.email;\r\n      const newPriceUpdate = carsService.updatePrice(id, newPrice, ownerEmail);\r\n      res.status(200).send({\r\n        status: 200,\r\n        data: newPriceUpdate,\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteCar(req, res) {\r\n    const carId = req.params.car_id;\r\n    const validator = new Validator();\r\n    const validDeleteCarReq = validator.validateDeleteACar(carId);\r\n    if (validDeleteCarReq.error) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        data: validDeleteCarReq.data,\r\n      });\r\n    } else if (!carsService.getCarById(parseInt(carId, 10)).exist) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: 'Invalid carId. There is no car with this id.',\r\n      });\r\n    } else {\r\n      const id = parseInt(carId, 10);\r\n      carsService.delete(id);\r\n      res.status(200).send({\r\n        status: 200,\r\n        data: 'Car Ad successfully deleted',\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CarsController();\r\n"],"file":"CarsController.js"}