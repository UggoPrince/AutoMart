{"version":3,"sources":["../../../server/controllers/OrdersController.js"],"names":["OrdersController","req","res","body","buyer","carId","amount","validator","Validator","validOrderReq","validateMakeOrderFields","error","status","send","data","idErrors","idErrorMessages","deBuyer","parseInt","deCar","usersService","getUserById","exist","push","carsService","getCarById","carPrice","price","madeOrder","ordersService","order","newAmount","orderId","params","order_id","validOrderUpdateReq","validateUpdateOrderFields","getOrderById","id","getOrderStatus","statusError","statusErrorMessages","update"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\nimport ordersService from '../services/OrdersService';\r\nimport carsService from '../services/CarsService';\r\nimport usersService from '../services/UsersService';\r\nimport Validator from '../helpers/ValidateOrder';\r\n\r\nclass OrdersController {\r\n  makeOrder(req, res) {\r\n    const {\r\n      buyer, carId, amount,\r\n    } = req.body;\r\n\r\n    const validator = new Validator();\r\n    const validOrderReq = validator.validateMakeOrderFields(buyer, carId, amount);\r\n\r\n    if (validOrderReq.error) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: validOrderReq.data,\r\n      });\r\n    } else {\r\n      let idErrors = false;\r\n      const idErrorMessages = [];\r\n      const deBuyer = parseInt(buyer, 10);\r\n      const deCar = parseInt(carId, 10);\r\n      if (!usersService.getUserById(deBuyer).exist) { // -1 because it's an array\r\n        idErrors = true;\r\n        idErrorMessages.push('Invalid buyer. No buyer with such id.');\r\n      }\r\n      if (!carsService.getCarById(deCar).exist) { // -1 because it's an array\r\n        idErrors = true;\r\n        idErrorMessages.push('Invalid carId. No car with such id.');\r\n      }\r\n      if (idErrors) {\r\n        res.status(404).send({\r\n          status: 404,\r\n          error: idErrorMessages,\r\n        });\r\n      } else {\r\n        const carPrice = carsService.getCarById(deCar).price;\r\n        const madeOrder = ordersService.order(buyer, carId, amount, carPrice);\r\n        res.status(201).send({\r\n          status: 201,\r\n          data: madeOrder,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  updateOrder(req, res) {\r\n    const amount = req.body.newAmount;\r\n    const orderId = req.params.order_id;\r\n    const validator = new Validator();\r\n    const validOrderUpdateReq = validator.validateUpdateOrderFields(amount, orderId);\r\n\r\n    if (validOrderUpdateReq.error) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: validOrderUpdateReq.data,\r\n      });\r\n    } else if (!ordersService.getOrderById(parseInt(orderId, 10)).exist) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: 'Invalid orderId. No order with such id.',\r\n      });\r\n    } else {\r\n      const id = parseInt(orderId, 10);\r\n      const getOrderStatus = ordersService.getOrderById(id).data.status;\r\n      let statusError = false;\r\n      let statusErrorMessages = '';\r\n      if (getOrderStatus === 'accepted') {\r\n        statusError = true;\r\n        statusErrorMessages = 'Your order has been accepted and can not be updated anymore';\r\n      } else if (getOrderStatus === 'rejected') {\r\n        statusError = true;\r\n        statusErrorMessages = 'Your order was rejected and can not be updated. Make a new order.';\r\n      }\r\n\r\n      if (statusError) {\r\n        res.status(404).send({\r\n          status: 404,\r\n          error: statusErrorMessages,\r\n        });\r\n      } else {\r\n        const update = ordersService.update(id, amount);\r\n        res.status(200).send({\r\n          status: 200,\r\n          data: update,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default new OrdersController();\r\n"],"file":"OrdersController.js"}