{"version":3,"sources":["../../../server/controllers/UsersController.js"],"names":["UsersController","req","res","reqBody","body","isAdmin","Users","signup","result","name","detail","email","status","send","error","token","prepareToken","rows","data","signin","rowCount","password","userData","tokenData","id","is_admin","JWT","signToken"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;IAMMA,e;;;;;;;;;;;;+CACUC,G,EAAKC,G;;;;;;AACXC,gBAAAA,O,GAAUF,GAAG,CAACG,I;AACpBD,gBAAAA,OAAO,CAACE,OAAR,GAAkB,KAAlB;;uBAEqBC,kBAAMC,MAAN,CAAaJ,OAAb,C;;;AAAfK,gBAAAA,M;;AACN,oBAAIA,MAAM,CAACC,IAAP,IACCD,MAAM,CAACC,IAAP,KAAgB,OADjB,IAECD,MAAM,CAACE,MAAP,4BAAkCP,OAAO,CAACQ,KAA1C,sBAFL,EAEyE;AACvET,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAAA,MAAM,EAAE,GADW;AAEnBE,oBAAAA,KAAK,EAAE;AAFY,mBAArB;AAID,iBAPD,MAOO;AACCC,kBAAAA,KADD,GACSf,eAAe,CAACgB,YAAhB,CAA6BR,MAAM,CAACS,IAAP,CAAY,CAAZ,CAA7B,CADT;AAELT,kBAAAA,MAAM,CAACS,IAAP,CAAY,CAAZ,EAAeF,KAAf,GAAuBA,KAAvB;AACAb,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAAA,MAAM,EAAE,GADW;AAEnBM,oBAAAA,IAAI,EAAEV,MAAM,CAACS,IAAP,CAAY,CAAZ;AAFa,mBAArB;AAID;;;;;;;;;;;;;;;;;;;;;gDAGWhB,G,EAAKC,G;;;;;;AACXC,gBAAAA,O,GAAUF,GAAG,CAACG,I;;uBACCE,kBAAMa,MAAN,CAAahB,OAAb,C;;;AAAfK,gBAAAA,M;;AACN,oBAAIA,MAAM,CAACY,QAAP,KAAoB,CAAxB,EAA2B;AACzBlB,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAAA,MAAM,EAAE,GADW;AAEnBE,oBAAAA,KAAK,EAAE;AAFY,mBAArB;AAID,iBALD,MAKO,IAAIN,MAAM,CAACS,IAAP,CAAY,CAAZ,EAAeI,QAAf,KAA4BlB,OAAO,CAACkB,QAAxC,EAAkD;AACvDnB,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAAA,MAAM,EAAE,GADW;AAEnBE,oBAAAA,KAAK,EAAE;AAFY,mBAArB;AAID,iBALM,MAKA;AACCC,kBAAAA,KADD,GACSf,eAAe,CAACgB,YAAhB,CAA6BR,MAAM,CAACS,IAAP,CAAY,CAAZ,CAA7B,CADT;AAELT,kBAAAA,MAAM,CAACS,IAAP,CAAY,CAAZ,EAAeF,KAAf,GAAuBA,KAAvB;AACAb,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAAA,MAAM,EAAE,GADW;AAEnBM,oBAAAA,IAAI,EAAEV,MAAM,CAACS,IAAP,CAAY,CAAZ;AAFa,mBAArB;AAID;;;;;;;;;;;;;;;;;;iCAGiBK,Q,EAAU;AAC5B,UAAMC,SAAS,GAAG;AAChBC,QAAAA,EAAE,EAAEF,QAAQ,CAACE,EADG;AAEhBb,QAAAA,KAAK,EAAEW,QAAQ,CAACX,KAFA;AAGhBN,QAAAA,OAAO,EAAEiB,QAAQ,CAACG;AAHF,OAAlB;;AAKA,UAAMV,KAAK,GAAGW,gBAAIC,SAAJ,CAAcJ,SAAd,CAAd;;AACA,aAAOR,KAAP;AACD;;;;;;eAGY,IAAIf,eAAJ,E","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\nimport Users from '../models/Users';\r\nimport JWT from '../authentication/JWT';\r\nimport {\r\n  errorNoAccount,\r\n  errorInvalidEmailPass,\r\n  errorEmailDuplicate,\r\n} from '../helpers/errorHandlers';\r\n\r\nclass UsersController {\r\n  async addUser(req, res) {\r\n    const reqBody = req.body;\r\n    reqBody.isAdmin = false;\r\n\r\n    const result = await Users.signup(reqBody);\r\n    if (result.name\r\n      && result.name === 'error'\r\n      && result.detail === `Key (email)=(${reqBody.email}) already exists.`) {\r\n      res.status(400).send({\r\n        status: 400,\r\n        error: errorEmailDuplicate(),\r\n      });\r\n    } else {\r\n      const token = UsersController.prepareToken(result.rows[0]);\r\n      result.rows[0].token = token;\r\n      res.status(201).send({\r\n        status: 201,\r\n        data: result.rows[0],\r\n      });\r\n    }\r\n  }\r\n\r\n  async getUser(req, res) {\r\n    const reqBody = req.body;\r\n    const result = await Users.signin(reqBody);\r\n    if (result.rowCount === 0) {\r\n      res.status(400).send({\r\n        status: 400,\r\n        error: errorNoAccount(),\r\n      });\r\n    } else if (result.rows[0].password !== reqBody.password) {\r\n      res.status(400).send({\r\n        status: 400,\r\n        error: errorInvalidEmailPass(),\r\n      });\r\n    } else {\r\n      const token = UsersController.prepareToken(result.rows[0]);\r\n      result.rows[0].token = token;\r\n      res.status(200).send({\r\n        status: 200,\r\n        data: result.rows[0],\r\n      });\r\n    }\r\n  }\r\n\r\n  static prepareToken(userData) {\r\n    const tokenData = {\r\n      id: userData.id,\r\n      email: userData.email,\r\n      isAdmin: userData.is_admin,\r\n    };\r\n    const token = JWT.signToken(tokenData);\r\n    return token;\r\n  }\r\n}\r\n\r\nexport default new UsersController();\r\n"],"file":"UsersController.js"}