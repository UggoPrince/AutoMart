{"version":3,"sources":["../../../server/controllers/UsersController.js"],"names":["UsersController","req","res","reqBody","body","is_admin","email","Users","signup","result","name","detail","status","send","error","token","prepareToken","rows","id","first_name","last_name","address","phone_number","data","signin","rowCount","password","userData","tokenData","Auth","signToken"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;IAMMA,e;;;;;;;;;;;;+CACUC,G,EAAKC,G;;;;;;;AACXC,gBAAAA,O,GAAUF,GAAG,CAACG,I;AACpBD,gBAAAA,OAAO,CAACE,QAAR,GAAmB,KAAnB;;AACA,oBAAIF,OAAO,CAACG,KAAR,KAAkB,mBAAlB,IACDH,OAAO,CAACG,KAAR,KAAkB,iBADjB,IAEDH,OAAO,CAACG,KAAR,KAAkB,qBAFrB,EAE4C;AAC1CH,kBAAAA,OAAO,CAACE,QAAR,GAAmB,IAAnB;AACD;;;uBAEoBE,kBAAMC,MAAN,CAAaL,OAAb,C;;;AAAfM,gBAAAA,M;;AACN,oBAAIA,MAAM,CAACC,IAAP,IACCD,MAAM,CAACC,IAAP,KAAgB,OADjB,IAECD,MAAM,CAACE,MAAP,4BAAkCR,OAAO,CAACG,KAA1C,sBAFL,EAEyE;AACvEJ,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAAA,MAAM,EAAE,GADW;AAEnBE,oBAAAA,KAAK,EAAE;AAFY,mBAArB;AAID,iBAPD,MAOO;AACCC,kBAAAA,KADD,GACSf,eAAe,CAACgB,YAAhB,CAA6BP,MAAM,CAACQ,IAAP,CAAY,CAAZ,CAA7B,CADT;AAAA,kCAKDR,MAAM,CAACQ,IAAP,CAAY,CAAZ,CALC,EAIHC,EAJG,iBAIHA,EAJG,EAICC,UAJD,iBAICA,UAJD,EAIaC,SAJb,iBAIaA,SAJb,EAIwBd,KAJxB,iBAIwBA,KAJxB,EAI+Be,OAJ/B,iBAI+BA,OAJ/B,EAIwCC,YAJxC,iBAIwCA,YAJxC,EAIsDjB,QAJtD,iBAIsDA,QAJtD;AAMLI,kBAAAA,MAAM,CAACQ,IAAP,CAAY,CAAZ,IAAiB;AACfF,oBAAAA,KAAK,EAALA,KADe;AACRG,oBAAAA,EAAE,EAAFA,EADQ;AACJC,oBAAAA,UAAU,EAAVA,UADI;AACQC,oBAAAA,SAAS,EAATA,SADR;AACmBd,oBAAAA,KAAK,EAALA,KADnB;AAC0Be,oBAAAA,OAAO,EAAPA,OAD1B;AACmCC,oBAAAA,YAAY,EAAZA,YADnC;AACiDjB,oBAAAA,QAAQ,EAARA;AADjD,mBAAjB;AAGAH,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAAA,MAAM,EAAE,GADW;AAEnBW,oBAAAA,IAAI,EAAEd,MAAM,CAACQ,IAAP,CAAY,CAAZ;AAFa,mBAArB;AAID;;;;;;;;;;;;;;;;;;;;;gDAGWhB,G,EAAKC,G;;;;;;;AACXC,gBAAAA,O,GAAUF,GAAG,CAACG,I;;uBACCG,kBAAMiB,MAAN,CAAarB,OAAb,C;;;AAAfM,gBAAAA,M;;AACN,oBAAIA,MAAM,CAACgB,QAAP,KAAoB,CAAxB,EAA2B;AACzBvB,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAAA,MAAM,EAAE,GADW;AAEnBE,oBAAAA,KAAK,EAAE;AAFY,mBAArB;AAID,iBALD,MAKO,IAAIL,MAAM,CAACQ,IAAP,CAAY,CAAZ,EAAeS,QAAf,KAA4BvB,OAAO,CAACuB,QAAxC,EAAkD;AACvDxB,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAAA,MAAM,EAAE,GADW;AAEnBE,oBAAAA,KAAK,EAAE;AAFY,mBAArB;AAID,iBALM,MAKA;AACCC,kBAAAA,KADD,GACSf,eAAe,CAACgB,YAAhB,CAA6BP,MAAM,CAACQ,IAAP,CAAY,CAAZ,CAA7B,CADT;AAAA,mCAKDR,MAAM,CAACQ,IAAP,CAAY,CAAZ,CALC,EAIHC,EAJG,kBAIHA,EAJG,EAICC,UAJD,kBAICA,UAJD,EAIaC,SAJb,kBAIaA,SAJb,EAIwBd,KAJxB,kBAIwBA,KAJxB,EAI+Be,OAJ/B,kBAI+BA,OAJ/B,EAIwCC,YAJxC,kBAIwCA,YAJxC,EAIsDjB,QAJtD,kBAIsDA,QAJtD;AAMLI,kBAAAA,MAAM,CAACQ,IAAP,CAAY,CAAZ,IAAiB;AACfF,oBAAAA,KAAK,EAALA,KADe;AACRG,oBAAAA,EAAE,EAAFA,EADQ;AACJC,oBAAAA,UAAU,EAAVA,UADI;AACQC,oBAAAA,SAAS,EAATA,SADR;AACmBd,oBAAAA,KAAK,EAALA,KADnB;AAC0Be,oBAAAA,OAAO,EAAPA,OAD1B;AACmCC,oBAAAA,YAAY,EAAZA,YADnC;AACiDjB,oBAAAA,QAAQ,EAARA;AADjD,mBAAjB;AAGAH,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAAA,MAAM,EAAE,GADW;AAEnBW,oBAAAA,IAAI,EAAEd,MAAM,CAACQ,IAAP,CAAY,CAAZ;AAFa,mBAArB;AAID;;;;;;;;;;;;;;;;;;iCAGiBU,Q,EAAU;AAC5B,UAAMC,SAAS,GAAG;AAChBV,QAAAA,EAAE,EAAES,QAAQ,CAACT,EADG;AAEhBZ,QAAAA,KAAK,EAAEqB,QAAQ,CAACrB,KAFA;AAGhBD,QAAAA,QAAQ,EAAEsB,QAAQ,CAACtB;AAHH,OAAlB;;AAKA,UAAMU,KAAK,GAAGc,2BAAKC,SAAL,CAAeF,SAAf,CAAd;;AACA,aAAOb,KAAP;AACD;;;;;;eAGY,IAAIf,eAAJ,E","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable camelcase */\nimport Users from '../models/Users';\nimport Auth from '../middlewares/AuthMiddleware';\nimport {\n  errorNoAccount,\n  errorInvalidEmailPass,\n  errorEmailDuplicate,\n} from '../helpers/errorHandlers';\n\nclass UsersController {\n  async addUser(req, res) {\n    const reqBody = req.body;\n    reqBody.is_admin = false;\n    if (reqBody.email === 'johndoe@gmail.com'\n    || reqBody.email === 'admin@gmail.com'\n    || reqBody.email === 'bestadmin@yahoo.com') {\n      reqBody.is_admin = true;\n    }\n\n    const result = await Users.signup(reqBody);\n    if (result.name\n      && result.name === 'error'\n      && result.detail === `Key (email)=(${reqBody.email}) already exists.`) {\n      res.status(400).send({\n        status: 400,\n        error: errorEmailDuplicate(),\n      });\n    } else {\n      const token = UsersController.prepareToken(result.rows[0]);\n      const {\n        // eslint-disable-next-line camelcase\n        id, first_name, last_name, email, address, phone_number, is_admin,\n      } = result.rows[0];\n      result.rows[0] = {\n        token, id, first_name, last_name, email, address, phone_number, is_admin,\n      };\n      res.status(201).send({\n        status: 201,\n        data: result.rows[0],\n      });\n    }\n  }\n\n  async getUser(req, res) {\n    const reqBody = req.body;\n    const result = await Users.signin(reqBody);\n    if (result.rowCount === 0) {\n      res.status(400).send({\n        status: 400,\n        error: errorNoAccount(),\n      });\n    } else if (result.rows[0].password !== reqBody.password) {\n      res.status(400).send({\n        status: 400,\n        error: errorInvalidEmailPass(),\n      });\n    } else {\n      const token = UsersController.prepareToken(result.rows[0]);\n      const {\n        // eslint-disable-next-line camelcase\n        id, first_name, last_name, email, address, phone_number, is_admin,\n      } = result.rows[0];\n      result.rows[0] = {\n        token, id, first_name, last_name, email, address, phone_number, is_admin,\n      };\n      res.status(200).send({\n        status: 200,\n        data: result.rows[0],\n      });\n    }\n  }\n\n  static prepareToken(userData) {\n    const tokenData = {\n      id: userData.id,\n      email: userData.email,\n      is_admin: userData.is_admin,\n    };\n    const token = Auth.signToken(tokenData);\n    return token;\n  }\n}\n\nexport default new UsersController();\n"],"file":"UsersController.js"}