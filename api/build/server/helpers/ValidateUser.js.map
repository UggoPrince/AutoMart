{"version":3,"sources":["../../../server/helpers/ValidateUser.js"],"names":["ValidateUser","email","password","isValidEmail","isValidPassword","getErrorMessage","firstname","lastname","address","phoneNumber","isValidName","isValidAddress","isValidPhoneNumber","name","field","nameRegExp","isEmptyString","integrateError","test","addRegExp","emailRegExp","passRegExp","telRegExp","Validator"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable no-useless-constructor */\r\n/* eslint-disable no-control-regex */\r\nimport Validator from './Validator';\r\n\r\nclass ValidateUser extends Validator {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  validateSigninFields(email, password) {\r\n    this.isValidEmail(email, 'email'); // validate email\r\n    this.isValidPassword(password, 'password'); // validate password\r\n    return this.getErrorMessage();\r\n  }\r\n\r\n  validateSignupFields(firstname, lastname, email, password, address, phoneNumber) {\r\n    this.isValidName(firstname, 'firstname'); // validate firstname\r\n    this.isValidName(lastname, 'lastname'); // validate lastname\r\n    this.isValidAddress(address, 'address'); // validate address\r\n    this.isValidEmail(email, 'email'); // validate email\r\n    this.isValidPhoneNumber(phoneNumber, 'phone_number'); // validate phone number\r\n    this.isValidPassword(password, 'password'); // validate password\r\n\r\n    return this.getErrorMessage();\r\n  }\r\n\r\n  isValidName(name, field) {\r\n    const nameRegExp = /^(?=.*[A-Za-z])+\\w+[^_]$/;\r\n    if (this.isEmptyString(name)) {\r\n      this.integrateError(field, `No ${field} entered.`);\r\n    } else if (!nameRegExp.test(name)) {\r\n      this.integrateError(field, `Invalid ${field}.`);\r\n    }\r\n  }\r\n\r\n  isValidAddress(address, field) {\r\n    const addRegExp = /^[a-zA-Z0-9\\s,.'-]{3,}$/;\r\n    if (this.isEmptyString(address)) {\r\n      this.integrateError(field, `No ${field} entered.`);\r\n    } else if (!addRegExp.test(address)) {\r\n      this.integrateError(field, `Invalid ${field}.`);\r\n    }\r\n  }\r\n\r\n  isValidEmail(email, field) {\r\n    const emailRegExp = /^(([^<>()\\\\[\\]\\\\.,;:@\"\\x00-\\x20\\x7F]|\\\\.)+|(\"\"\"([^\\x0A\\x0D\"\\\\]|\\\\\\\\)+\"\"\"))@(([a-z]|#\\d+?)([a-z0-9-]|#\\d+?)*([a-z0-9]|#\\d+?)\\.)+([a-z]{2,4})$/i;\r\n    if (this.isEmptyString(email)) {\r\n      this.integrateError(field, `No ${field} entered.`);\r\n    } else if (!emailRegExp.test(email)) {\r\n      this.integrateError(field, `Invalid ${field}.`);\r\n    }\r\n  }\r\n\r\n  isValidPassword(password, field) {\r\n    const passRegExp = /^(?=.*[A-Za-z])+(?=.*\\d)[A-Za-z\\d]{8,}$/; // /^[A-Za-z]\\w{8,}$/;\r\n    if (this.isEmptyString(password)) {\r\n      this.integrateError(field, `${field} must have a letter, number and atleast 8 characters long.`);\r\n    } else if (!passRegExp.test(password)) {\r\n      this.integrateError(field, `Invalid ${field}. password must have a letter, number and atleast 8 characters long.`);\r\n    }\r\n  }\r\n\r\n  isValidPhoneNumber(phoneNumber, field) {\r\n    const telRegExp = /^(\\+\\d{1,3} ?)?(\\(\\d{1,5}\\)|\\d{1,5}) ?\\d{3}?\\d{0,7}( (x|xtn|ext|extn|pax|pbx|extension)?\\.? ?\\d{2-5})?$/i;\r\n    if (this.isEmptyString(phoneNumber)) {\r\n      this.integrateError(field, `No ${field} entered.`);\r\n    } else if (!telRegExp.test(phoneNumber)) {\r\n      this.integrateError(field, `Invalid ${field}.`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ValidateUser;\r\n"],"file":"ValidateUser.js"}