{"version":3,"sources":["../../../server/helpers/ValidateCar.js"],"names":["ValidateCar","owner","state","status","price","title","manufacturer","model","bodyType","photo","isValidOwner","isValidState","isValidStatus","isValidPrice","isValidTitle","isValidManufacturer","isValidModel","isValidBodyType","isValidPhoto","getErrorMessage","carId","newStatus","validateInt","isValidNewStatus","newPrice","isValidStatusQuery","minPrice","maxPrice","validateString","type","field","isEmptyString","integrateError","str","toLowerCase","validateFloat","bodyT","myPhoto","query","Validator"],"mappings":";;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;IAEMA,W;;;;;AACJ,yBAAc;AAAA;;AAAA;AAEb;;;;gDAE2B;AAC1BC,IAAAA,K,EAAOC,K,EAAOC,M,EAAQC,K,EAAOC,K,EAAOC,Y,EAAcC,K,EAAOC,Q,EAAUC,K,EACnE;AACA,WAAKC,YAAL,CAAkBT,KAAlB,EAAyB,OAAzB,EADA,CACmC;;AACnC,WAAKU,YAAL,CAAkBT,KAAlB,EAAyB,OAAzB,EAFA,CAEmC;;AACnC,WAAKU,aAAL,CAAmBT,MAAnB,EAA2B,QAA3B,EAHA,CAGsC;;AACtC,WAAKU,YAAL,CAAkBT,KAAlB,EAAyB,OAAzB,EAJA,CAImC;;AACnC,WAAKU,YAAL,CAAkBT,KAAlB,EAAyB,OAAzB,EALA,CAKmC;;AACnC,WAAKU,mBAAL,CAAyBT,YAAzB,EAAuC,cAAvC,EANA,CAMwD;;AACxD,WAAKU,YAAL,CAAkBT,KAAlB,EAAyB,OAAzB,EAPA,CAOmC;;AACnC,WAAKU,eAAL,CAAqBT,QAArB,EAA+B,UAA/B,EARA,CAQ4C;;AAC5C,WAAKU,YAAL,CAAkBT,KAAlB,EAAyB,OAAzB,EATA,CASmC;;AACnC,aAAO,KAAKU,eAAL,EAAP;AACD,K,CAED;;;;kDAC8BC,K,EAAOC,S,EAAW;AAC9C,WAAKC,WAAL,CAAiBF,KAAjB,EAAwB,OAAxB;AACA,WAAKG,gBAAL,CAAsBF,SAAtB,EAAiC,WAAjC;AACA,aAAO,KAAKF,eAAL,EAAP;AACD,K,CAED;;;;gDAC4BC,K,EAAOI,Q,EAAU;AAC3C,WAAKF,WAAL,CAAiBF,KAAjB,EAAwB,OAAxB,EAD2C,CACT;;AAClC,WAAKP,YAAL,CAAkBW,QAAlB,EAA4B,UAA5B,EAF2C,CAEF;;AACzC,aAAO,KAAKL,eAAL,EAAP;AACD,K,CAED;;;;0CACsBC,K,EAAO;AAC3B,WAAKE,WAAL,CAAiBF,KAAjB,EAAwB,OAAxB;AACA,aAAO,KAAKD,eAAL,EAAP;AACD,K,CAED;;;;0CACsBhB,M,EAAQ;AAC5B,WAAKsB,kBAAL,CAAwBtB,MAAxB,EAAgC,QAAhC;AACA,aAAO,KAAKgB,eAAL,EAAP;AACD,K,CAED;;;;sDACkChB,M,EAAQuB,Q,EAAUC,Q,EAAU;AAC5D,WAAKF,kBAAL,CAAwBtB,MAAxB,EAAgC,QAAhC;AACA,WAAKU,YAAL,CAAkBa,QAAlB,EAA4B,WAA5B;AACA,WAAKb,YAAL,CAAkBc,QAAlB,EAA4B,WAA5B;AACA,aAAO,KAAKR,eAAL,EAAP;AACD,K,CAED;;;;kDAC8BhB,M,EAAQD,K,EAAO;AAC3C,WAAKuB,kBAAL,CAAwBtB,MAAxB,EAAgC,QAAhC;AACA,WAAKQ,YAAL,CAAkBT,KAAlB,EAAyB,OAAzB;AACA,aAAO,KAAKiB,eAAL,EAAP;AACD;;;6DAEwChB,M,EAAQG,Y,EAAc;AAC7D,WAAKmB,kBAAL,CAAwBtB,MAAxB,EAAgC,QAAhC;AACA,WAAKyB,cAAL,CAAoBtB,YAApB,EAAkC,cAAlC;AACA,aAAO,KAAKa,eAAL,EAAP;AACD,K,CAED;;;;uCACmBC,K,EAAO;AACxB,WAAKE,WAAL,CAAiBF,KAAjB,EAAwB,OAAxB;AACA,aAAO,KAAKD,eAAL,EAAP;AACD;;;iCAEYlB,K,EAAO4B,I,EAAM;AACxB,WAAKP,WAAL,CAAiBrB,KAAjB,EAAwB4B,IAAxB;AACD;;;iCAEY3B,K,EAAO4B,K,EAAO;AACzB,UAAI,KAAKC,aAAL,CAAmB7B,KAAnB,CAAJ,EAA+B;AAC7B,aAAK8B,cAAL,CAAoBF,KAApB,eAAiCA,KAAjC;AACD,OAFD,MAEO;AACL,YAAMG,GAAG,GAAG/B,KAAK,CAACgC,WAAN,EAAZ;;AACA,YAAID,GAAG,KAAK,KAAR,IAAiBA,GAAG,KAAK,MAA7B,EAAqC;AACnC,eAAKD,cAAL,CAAoBF,KAApB,oBAAsCA,KAAtC;AACD;AACF;AACF;;;kCAEa3B,M,EAAQ2B,K,EAAO;AAC3B,UAAI,KAAKC,aAAL,CAAmB5B,MAAnB,CAAJ,EAAgC;AAC9B,aAAK6B,cAAL,CAAoBF,KAApB,eAAiCA,KAAjC;AACD,OAFD,MAEO;AACL,YAAMG,GAAG,GAAG9B,MAAM,CAAC+B,WAAP,EAAZ;;AACA,YAAID,GAAG,KAAK,WAAZ,EAAyB;AACvB,eAAKD,cAAL,CAAoBF,KAApB,oBAAsCA,KAAtC;AACD;AACF;AACF;;;qCAEgB3B,M,EAAQ2B,K,EAAO;AAC9B,UAAI,KAAKC,aAAL,CAAmB5B,MAAnB,CAAJ,EAAgC;AAC9B,aAAK6B,cAAL,CAAoBF,KAApB,eAAiCA,KAAjC;AACD,OAFD,MAEO;AACL,YAAMG,GAAG,GAAG9B,MAAM,CAAC+B,WAAP,EAAZ;;AACA,YAAID,GAAG,KAAK,MAAZ,EAAoB;AAClB,eAAKD,cAAL,CAAoBF,KAApB,oBAAsCA,KAAtC;AACD;AACF;AACF;;;iCAEY1B,K,EAAO0B,K,EAAO;AACzB,WAAKK,aAAL,CAAmB/B,KAAnB,EAA0B0B,KAA1B;AACD;;;iCAEYzB,K,EAAOyB,K,EAAO;AACzB,WAAKF,cAAL,CAAoBvB,KAApB,EAA2ByB,KAA3B;AACD;;;wCAEmBxB,Y,EAAcwB,K,EAAO;AACvC,WAAKF,cAAL,CAAoBtB,YAApB,EAAkCwB,KAAlC;AACD;;;iCAEYvB,K,EAAOuB,K,EAAO;AACzB,WAAKF,cAAL,CAAoBrB,KAApB,EAA2BuB,KAA3B;AACD;;;oCAEetB,Q,EAAUsB,K,EAAO;AAC/B,UAAI,KAAKC,aAAL,CAAmBvB,QAAnB,CAAJ,EAAkC;AAChC,aAAKwB,cAAL,CAAoBF,KAApB,eAAiCA,KAAjC;AACD,OAFD,MAEO;AACL,YAAMG,GAAG,GAAGzB,QAAQ,CAAC0B,WAAT,EAAZ;AACA,YAAME,KAAK,GAAG,CAAC,eAAD,EAAkB,QAAlB,EACZ,MADY,EACJ,YADI,EAEZ,QAFY,EAEF,QAFE,EAGZ,MAHY,EAGJ,QAHI,EAIZ,gBAJY,EAIM,eAJN,EAKZ,MALY,EAKJ,YALI,CAAd;;AAOA,YAAIH,GAAG,KAAK,cAAR,IAA0BA,GAAG,KAAK,OAAlC,IACDA,GAAG,KAAK,KADP,IACgBA,GAAG,KAAK,WADxB,IAEDA,GAAG,KAAK,OAFP,IAEkBA,GAAG,KAAK,OAF1B,IAGDA,GAAG,KAAK,KAHP,IAGgBA,GAAG,KAAK,OAHxB,IAIDA,GAAG,KAAK,eAJP,IAI0BA,GAAG,KAAK,cAJlC,IAKDA,GAAG,KAAK,KALP,IAKgBA,GAAG,KAAK,WAL5B,EAKyC;AACvC,eAAKD,cAAL,CAAoBF,KAApB,oBAAsCA,KAAtC,4CAA6EM,KAA7E;AACD;AACF;AACF;;;iCAEYC,O,EAASJ,G,EAAK;AACzB;AACA,UAAI,CAACI,OAAO,CAAC5B,KAAb,EAAoB;AAClB,aAAKuB,cAAL,CAAoBC,GAApB,eAA+BA,GAA/B;AACD,OAFD,MAEO,IAAII,OAAO,CAAC5B,KAAR,CAAcoB,IAAd,KAAuB,YAAvB,IAAuCQ,OAAO,CAAC5B,KAAR,CAAcoB,IAAd,KAAuB,WAAlE,EAA+E;AACpF,aAAKG,cAAL,CAAoBC,GAApB,iCAAiDA,GAAjD;AACD;AACF;;;uCAEkB9B,M,EAAQmC,K,EAAO;AAChC,UAAInC,MAAM,KAAK,WAAf,EAA4B;AAC1B,aAAK6B,cAAL,CAAoBM,KAApB,gBAAkCA,KAAlC;AACD;AACF;;;;EAlKuBC,sB;;eAqKXvC,W","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable no-useless-constructor */\r\n/* eslint-disable camelcase */\r\nimport Validator from './Validator';\r\n\r\nclass ValidateCar extends Validator {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  validateCreateAdvertFields( // validates the fields that would creat an advert\r\n    owner, state, status, price, title, manufacturer, model, bodyType, photo,\r\n  ) {\r\n    this.isValidOwner(owner, 'owner'); // validate owner\r\n    this.isValidState(state, 'state'); // validate state\r\n    this.isValidStatus(status, 'status'); // validate status\r\n    this.isValidPrice(price, 'price'); // validate price\r\n    this.isValidTitle(title, 'title'); // validate title\r\n    this.isValidManufacturer(manufacturer, 'manufacturer'); // validate manufacturer\r\n    this.isValidModel(model, 'model'); // validate model\r\n    this.isValidBodyType(bodyType, 'bodyType'); // validate body_type\r\n    this.isValidPhoto(photo, 'image'); // validate photo\r\n    return this.getErrorMessage();\r\n  }\r\n\r\n  // validates the field and url parameter sent to update a car status\r\n  validateUpdateCarStatusFields(carId, newStatus) {\r\n    this.validateInt(carId, 'carId');\r\n    this.isValidNewStatus(newStatus, 'newStatus');\r\n    return this.getErrorMessage();\r\n  }\r\n\r\n  // validates the field and url parameter that updates a car price\r\n  validatUpdateCarPriceFields(carId, newPrice) {\r\n    this.validateInt(carId, 'carId'); // validate car id\r\n    this.isValidPrice(newPrice, 'newPrice'); // validate the new price\r\n    return this.getErrorMessage();\r\n  }\r\n\r\n  // validate the url parameter for car id sent to retrieve a car\r\n  validateGetSpecficCar(carId) {\r\n    this.validateInt(carId, 'carId');\r\n    return this.getErrorMessage();\r\n  }\r\n\r\n  // validate the query string sent for status\r\n  validateGetUnsoldCars(status) {\r\n    this.isValidStatusQuery(status, 'status');\r\n    return this.getErrorMessage();\r\n  }\r\n\r\n  // validate the query string for getting cars in a certain price range\r\n  validateGetUnsoldCarsInPriceRange(status, minPrice, maxPrice) {\r\n    this.isValidStatusQuery(status, 'status');\r\n    this.isValidPrice(minPrice, 'min_price');\r\n    this.isValidPrice(maxPrice, 'max_price');\r\n    return this.getErrorMessage();\r\n  }\r\n\r\n  // validate the query string for getting cars that are used\r\n  validate_Get_Unsold_Used_Cars(status, state) {\r\n    this.isValidStatusQuery(status, 'status');\r\n    this.isValidState(state, 'state');\r\n    return this.getErrorMessage();\r\n  }\r\n\r\n  validate_Get_Unsold_Cars_By_Manufacturer(status, manufacturer) {\r\n    this.isValidStatusQuery(status, 'status');\r\n    this.validateString(manufacturer, 'manufacturer');\r\n    return this.getErrorMessage();\r\n  }\r\n\r\n  // validate the url parameter for car id sent to delete a car\r\n  validateDeleteACar(carId) {\r\n    this.validateInt(carId, 'carId');\r\n    return this.getErrorMessage();\r\n  }\r\n\r\n  isValidOwner(owner, type) {\r\n    this.validateInt(owner, type);\r\n  }\r\n\r\n  isValidState(state, field) {\r\n    if (this.isEmptyString(state)) {\r\n      this.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = state.toLowerCase();\r\n      if (str !== 'new' && str !== 'used') {\r\n        this.integrateError(field, `Invalid ${field}. Must be [ new ] or [ used ].`);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidStatus(status, field) {\r\n    if (this.isEmptyString(status)) {\r\n      this.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = status.toLowerCase();\r\n      if (str !== 'available') {\r\n        this.integrateError(field, `Invalid ${field}. Must be [ available ].`);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidNewStatus(status, field) {\r\n    if (this.isEmptyString(status)) {\r\n      this.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = status.toLowerCase();\r\n      if (str !== 'sold') {\r\n        this.integrateError(field, `Invalid ${field}. Must be changed to [ sold ] in order to update the status.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidPrice(price, field) {\r\n    this.validateFloat(price, field);\r\n  }\r\n\r\n  isValidTitle(title, field) {\r\n    this.validateString(title, field);\r\n  }\r\n\r\n  isValidManufacturer(manufacturer, field) {\r\n    this.validateString(manufacturer, field);\r\n  }\r\n\r\n  isValidModel(model, field) {\r\n    this.validateString(model, field);\r\n  }\r\n\r\n  isValidBodyType(bodyType, field) {\r\n    if (this.isEmptyString(bodyType)) {\r\n      this.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = bodyType.toLowerCase();\r\n      const bodyT = [' Convertibles', ' Coupe',\r\n        ' SUV', ' Hatchback',\r\n        ' Sedan', ' Wagon',\r\n        ' Van', ' Truck',\r\n        ' Trailer truck', ' Tipper truck',\r\n        ' Bus', ' Motorbike',\r\n      ];\r\n      if (str !== 'convertibles' && str !== 'coupe'\r\n      && str !== 'suv' && str !== 'hatchback'\r\n      && str !== 'sedan' && str !== 'wagon'\r\n      && str !== 'van' && str !== 'truck'\r\n      && str !== 'trailer truck' && str !== 'tipper truck'\r\n      && str !== 'bus' && str !== 'motorbike') {\r\n        this.integrateError(field, `Invalid ${field}. Each should be one of these: ${bodyT}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidPhoto(myPhoto, str) {\r\n    // console.log(myPhoto.photo.length === undefined);\r\n    if (!myPhoto.photo) {\r\n      this.integrateError(str, `No ${str} submited.`);\r\n    } else if (myPhoto.photo.type !== 'image/jpeg' && myPhoto.photo.type !== 'image/png') {\r\n      this.integrateError(str, `You didn't submit an ${str} type. jpg/png is accepted.`);\r\n    }\r\n  }\r\n\r\n  isValidStatusQuery(status, query) {\r\n    if (status !== 'available') {\r\n      this.integrateError(query, `The ${query} query string must be the [ ?status=available ].`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ValidateCar;\r\n"],"file":"ValidateCar.js"}