{"version":3,"sources":["../../../server/helpers/Validator.js"],"names":["Validator","error","errorMessages","field","message","str","space","undefined","test","int","intRegExp","isEmptyString","integrateError","float","regExp","data"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;IAEMA,S;;;AACJ,uBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,KAAb;AACA,SAAKC,aAAL,GAAqB,EAArB;AACD;;;;mCAEcC,K,EAAOC,O,EAAS;AAC7B,WAAKH,KAAL,GAAa,IAAb;AACA,WAAKC,aAAL,CAAmBC,KAAnB,IAA4BC,OAA5B;AACD;;;kCAEaC,G,EAAK;AACjB,UAAMC,KAAK,GAAG,OAAd;;AACA,UAAID,GAAG,KAAK,EAAR,IAAcA,GAAG,KAAK,IAAtB,IAA8BA,GAAG,KAAKE,SAAtC,IAAmDD,KAAK,CAACE,IAAN,CAAWH,GAAX,CAAvD,EAAwE;AAAE,eAAO,IAAP;AAAc;;AACxF,aAAO,KAAP;AACD;;;gCAEWI,I,EAAKN,K,EAAO;AACtB,UAAMO,SAAS,GAAG,OAAlB;;AACA,UAAI,KAAKC,aAAL,CAAmBF,IAAnB,CAAJ,EAA6B;AAC3B,aAAKG,cAAL,CAAoBT,KAApB,eAAiCA,KAAjC;AACD,OAFD,MAEO,IAAI,CAACO,SAAS,CAACF,IAAV,CAAeC,IAAf,CAAD,IAAwBA,IAAG,KAAK,GAApC,EAAyC;AAC9C,aAAKG,cAAL,CAAoBT,KAApB,oBAAsCA,KAAtC;AACD;AACF;;;kCAEaU,M,EAAOV,K,EAAO;AAC1B,UAAMW,MAAM,GAAG,mBAAf;;AACA,UAAI,KAAKH,aAAL,CAAmBE,MAAnB,CAAJ,EAA+B;AAC7B,aAAKD,cAAL,CAAoBT,KAApB,eAAiCA,KAAjC;AACD,OAFD,MAEO,IAAI,CAACW,MAAM,CAACN,IAAP,CAAYK,MAAZ,CAAD,IAAuBA,MAAK,KAAK,GAAjC,IAAwCA,MAAK,KAAK,KAAtD,EAA6D;AAClE,aAAKD,cAAL,CAAoBT,KAApB,oBAAsCA,KAAtC;AACD;AACF;;;mCAEcE,G,EAAKF,K,EAAO;AACzB,UAAMW,MAAM,GAAG,cAAf;;AACA,UAAI,KAAKH,aAAL,CAAmBN,GAAnB,CAAJ,EAA6B;AAC3B,aAAKO,cAAL,CAAoBT,KAApB,eAAiCA,KAAjC;AACD,OAFD,MAEO,IAAI,CAACW,MAAM,CAACN,IAAP,CAAYH,GAAZ,CAAL,EAAuB;AAC5B,aAAKO,cAAL,CAAoBT,KAApB,oBAAsCA,KAAtC;AACD;AACF;;;sCAEiB;AAChB,aAAO;AAAEF,QAAAA,KAAK,EAAE,KAAKA,KAAd;AAAqBc,QAAAA,IAAI,EAAE,KAAKb;AAAhC,OAAP;AACD;;;;;;eAGYF,S","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\n\r\nclass Validator {\r\n  constructor() {\r\n    this.error = false;\r\n    this.errorMessages = {};\r\n  }\r\n\r\n  integrateError(field, message) {\r\n    this.error = true;\r\n    this.errorMessages[field] = message;\r\n  }\r\n\r\n  isEmptyString(str) {\r\n    const space = /^\\s*$/;\r\n    if (str === '' || str === null || str === undefined || space.test(str)) { return true; }\r\n    return false;\r\n  }\r\n\r\n  validateInt(int, field) {\r\n    const intRegExp = /^\\d+$/;\r\n    if (this.isEmptyString(int)) {\r\n      this.integrateError(field, `No ${field} entered.`);\r\n    } else if (!intRegExp.test(int) || int === '0') {\r\n      this.integrateError(field, `Invalid ${field}.`);\r\n    }\r\n  }\r\n\r\n  validateFloat(float, field) {\r\n    const regExp = /^\\d+(.{1}[\\d]+)?$/;\r\n    if (this.isEmptyString(float)) {\r\n      this.integrateError(field, `No ${field} entered.`);\r\n    } else if (!regExp.test(float) || float === '0' || float === '0.0') {\r\n      this.integrateError(field, `Invalid ${field}.`);\r\n    }\r\n  }\r\n\r\n  validateString(str, field) {\r\n    const regExp = /^[\\w ]+[^_]$/;\r\n    if (this.isEmptyString(str)) {\r\n      this.integrateError(field, `No ${field} entered.`);\r\n    } else if (!regExp.test(str)) {\r\n      this.integrateError(field, `Invalid ${field}.`);\r\n    }\r\n  }\r\n\r\n  getErrorMessage() {\r\n    return { error: this.error, data: this.errorMessages };\r\n  }\r\n}\r\n\r\nexport default Validator;\r\n"],"file":"Validator.js"}