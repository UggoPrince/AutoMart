components:
  schemas:
    Order:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/orderId'
        buyer:
          $ref: '#/components/schemas/buyer'
        car_id:
          $ref: '#/components/schemas/carId'
        amount:
          $ref: '#/components/schemas/orderStatus'
        status:
          $ref: '#/components/schemas/amount'
    makeOrder:
      type: object
      properties:
        car_id:
          $ref: '#/components/schemas/carId'
        amount:
          type: float
          description: Price the buyer is offering.
          example: '140000000.00'
    madeOrder:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/orderId'
        car_id:
          $ref: '#/components/schemas/carId'
        created_on:
          $ref: '#/components/schemas/created_on'
        status:
          $ref: '#/components/schemas/orderStatus'
        price:
          $ref: '#/components/schemas/price'
        price_offered:
          type: float
          description: Price the buyer is offering.
          example: '140000000.00'
    updateOrder:
      type: object
      properties:
        newAmount:
          type: float
          description: Pew price the buyer is offering.
          example: '14500000.00'
    updatedOrder:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/orderId'
        car_id:
          $ref: '#/components/schemas/carId'
        status:
          $ref: '#/components/schemas/orderStatus'
        old_price_offered:
          $ref: '#/components/schemas/amount'
        new_price_offered:
          type: float
          description: New Price the buyer want to buy the car
          example: '11500000.00'
    orderId:
      type: integer
      description: Order identification number
      example: '1'
    buyer:
      type: integer
      decsription: id of user making the order
      example: '4'
    amount:
      type: float
      description: price the buyer is offering for the car
      example: '14000000.00'
    orderStatus:
      type: string
      description: current status of the order
      example: pending, accepted or rejected
paths:
  /order:
    post:
      tags:
        - Order
      description: 'make a purchase order'
      opperationId: makeOrder
      parameters:
        - name: authentication
          in: header
          description: authentication header with jwt token
          required: true
          schema:
            $ref: '#/components/schemas/token'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/makeOrder'
        required: true
      responses:
        '201':
          description: Response data after user makes a purchase order
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 201 success status code
                    example: '201'
                  data:
                    $ref: '#/components/schemas/madeOrder'
        '400':
          description: > 
            Response when the amount offered is not a float
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 400 error status code
                    example: '400'
                  error: 
                    type: object/string
                    example: 'Invalid amount.'
        '404':
          description: > 
            Response for an unsuccessful purchase when carId does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 404 error status code
                    example: '404'
                  error: 
                    type: object/string
                    example: 'Car with id (6) does not exist.'
  /order/order_id/price:
    patch:
      tags:
        - Order
      description: buyer updates the price of their purchase when the status is still "pending"
      operationId: updateOrder
      parameters:
        - name: authentication
          in: header
          description: authentication header with jwt token
          required: true
          schema:
            $ref: '#/components/schemas/token'
        - name: order_id
          in: query
          description: order id
          required: true
          schema:
            $ref: '#/components/schemas/orderId'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/updateOrder'
        required: true
      responses:
        '200':
          description: Response data after buyer updates the price of the order
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 200 success status code
                    example: '200'
                  data:
                    $ref: '#/components/schemas/updatedOrder'
        '400':
          description: > 
            Response when the new amount is not a float
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 400 error status code
                    example: '400'
                  error: 
                    type: object/string
                    example: 'Invalid newAmount'
        '404':
          description: > 
            Response when the order does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 404 error status code
                    example: '404'
                  error: 
                    type: object/string
                    example: 'Order with id (orderId) does not exist.'