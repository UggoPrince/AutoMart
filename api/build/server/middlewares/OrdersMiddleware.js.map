{"version":3,"sources":["../../../server/middlewares/OrdersMiddleware.js"],"names":["OrdersMiddleware","req","res","next","body","car_id","amount","result","Validator","validateMakeOrderFields","error","status","send","Response","errorMessage","OrderChecker","checkOrderedCar","car","buyer","token","id","carPrice","data","price","order_id","params","validateUpdateOrderFields","checkId","order","old_amount","rQuery","query","validateGetOrdersOfAUser","user_id","parseInt","qLength"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\n/* eslint-disable class-methods-use-this */\nimport Validator from './validators/ValidateOrder';\nimport OrderChecker from './database_checkers/OrderChecker';\n\nclass OrdersMiddleware {\n  async validatePurchaseOrder(req, res, next) {\n    const { car_id, amount } = req.body;\n    const result = Validator.validateMakeOrderFields(car_id, amount);\n    if (result.error) {\n      res.status(400).send(Validator.Response());\n    } else {\n      let error = false;\n      const errorMessage = {};\n      const car = await OrderChecker.checkOrderedCar(car_id);\n      if (car.error) {\n        error = true;\n        errorMessage.car_id = `Car with id (${car_id}) does not exist.`;\n      }\n      if (error) {\n        res.status(404).send({\n          status: 404,\n          error: errorMessage,\n        });\n      } else {\n        req.body.buyer = req.token.id;\n        req.body.carPrice = car.data.price;\n        next();\n      }\n    }\n  }\n\n  async validateUpdateOrderPrice(req, res, next) {\n    const { price } = req.body;\n    const { order_id } = req.params;\n    const result = Validator.validateUpdateOrderFields(price, order_id);\n    if (result.error) {\n      res.status(400).send(Validator.Response());\n    } else {\n      const order = await OrderChecker.checkId(order_id);\n      if (order.error) {\n        res.status(404).send({\n          status: 404,\n          error: `Order with id (${order_id}) does not exist.`,\n        });\n      } else {\n        req.body.old_amount = order.data.amount;\n        next();\n      }\n    }\n  }\n\n  async validateGetOrders(req, res, next) {\n    const rQuery = req.query;\n    const result = Validator.validateGetOrdersOfAUser(rQuery.buyer);\n    const user_id = parseInt(rQuery.buyer, 10);\n    if (result.error) {\n      res.status(400).send(Validator.Response());\n    } else if (user_id !== req.token.id) {\n      res.status(400).send({ status: 400, error: 'invalid buyer.' });\n    } else {\n      req.qLength = 1;\n      next();\n    }\n  }\n}\n\nexport default new OrdersMiddleware();\n"],"file":"OrdersMiddleware.js"}