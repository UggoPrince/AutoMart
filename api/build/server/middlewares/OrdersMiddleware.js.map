{"version":3,"sources":["../../../server/middlewares/OrdersMiddleware.js"],"names":["validatePurchaseOrder","req","res","next","body","car_id","amount","result","Validator","validateMakeOrderFields","error","status","send","Response","errorMessage","OrderChecker","checkOrderedCar","car","buyer","token","id","carPrice","data","price","validateUpdateOrderPrice","order_id","params","validateUpdateOrderFields","checkId","order","old_amount","validateGetOrders","rQuery","query","validateGetOrdersOfAUser","user_id","parseInt","qLength"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable camelcase */\r\nimport Validator from './validators/ValidateOrder';\r\nimport OrderChecker from './database_checkers/OrderChecker';\r\n\r\nexport const validatePurchaseOrder = async (req, res, next) => {\r\n  const { car_id, amount } = req.body;\r\n  const result = Validator.validateMakeOrderFields(car_id, amount);\r\n  if (result.error) {\r\n    res.status(400).send(Validator.Response());\r\n  } else {\r\n    let error = false;\r\n    const errorMessage = {};\r\n    const car = await OrderChecker.checkOrderedCar(car_id);\r\n    if (car.error) {\r\n      error = true;\r\n      errorMessage.car_id = `Car with id (${car_id}) does not exist.`;\r\n    }\r\n    if (error) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: errorMessage,\r\n      });\r\n    } else {\r\n      req.body.buyer = req.token.id;\r\n      req.body.carPrice = car.data.price;\r\n      next();\r\n    }\r\n  }\r\n};\r\n\r\nexport const validateUpdateOrderPrice = async (req, res, next) => {\r\n  const { amount } = req.body;\r\n  const { order_id } = req.params;\r\n  const result = Validator.validateUpdateOrderFields(amount, order_id);\r\n  if (result.error) {\r\n    res.status(400).send(Validator.Response());\r\n  } else {\r\n    const order = await OrderChecker.checkId(order_id);\r\n    if (order.error) {\r\n      res.status(404).send({\r\n        status: 404,\r\n        error: `Order with id (${order_id}) does not exist.`,\r\n      });\r\n    } else {\r\n      req.body.old_amount = order.data.amount;\r\n      next();\r\n    }\r\n  }\r\n};\r\n\r\nexport const validateGetOrders = (req, res, next) => {\r\n  const rQuery = req.query;\r\n  const result = Validator.validateGetOrdersOfAUser(rQuery.buyer);\r\n  const user_id = parseInt(rQuery.buyer, 10);\r\n  if (result.error) {\r\n    res.status(400).send(Validator.Response());\r\n  } else if (user_id !== req.token.id) {\r\n    res.status(400).send({ status: 400, error: 'invalid buyer.' });\r\n  } else {\r\n    req.qLength = 1;\r\n    next();\r\n  }\r\n};\r\n"],"file":"OrdersMiddleware.js"}