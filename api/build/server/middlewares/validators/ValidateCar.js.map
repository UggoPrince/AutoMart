{"version":3,"sources":["../../../../server/middlewares/validators/ValidateCar.js"],"names":["ValidateCar","state","status","price","title","manufacturer","model","bodyType","photo","refresh","isValidState","isValidStatus","isValidPrice","isValidTitle","isValidManufacturer","isValidModel","isValidBodyType","isValidPhoto","getErrorMessage","carId","newStatus","validateInt","isValidNewStatus","newPrice","isValidStatusQuery","minPrice","maxPrice","validateString","field","isEmptyString","integrateError","str","toLowerCase","validateFloat","bodyT","myPhoto","type","query","Validator"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable no-useless-constructor */\r\n/* eslint-disable camelcase */\r\nimport Validator from './Validator';\r\n\r\nclass ValidateCar extends Validator {\r\n  static validateCreateAdvertFields( // validates the fields that would creat an advert\r\n    state, status, price, title, manufacturer, model, bodyType, photo,\r\n  ) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.isValidState(state, 'state'); // validate state\r\n    ValidateCar.isValidStatus(status, 'status'); // validate status\r\n    ValidateCar.isValidPrice(price, 'price'); // validate price\r\n    ValidateCar.isValidTitle(title, 'title'); // validate title\r\n    ValidateCar.isValidManufacturer(manufacturer, 'manufacturer'); // validate manufacturer\r\n    ValidateCar.isValidModel(model, 'model'); // validate model\r\n    ValidateCar.isValidBodyType(bodyType, 'bodyType'); // validate body_type\r\n    ValidateCar.isValidPhoto(photo, 'image'); // validate photo\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validates the field and url parameter sent to update a car status\r\n  static validateUpdateCarStatusFields(carId, newStatus) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.validateInt(carId, 'carId');\r\n    ValidateCar.isValidNewStatus(newStatus, 'newStatus');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validates the field and url parameter that updates a car price\r\n  static validatUpdateCarPriceFields(carId, newPrice) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.validateInt(carId, 'carId'); // validate car id\r\n    ValidateCar.isValidPrice(newPrice, 'newPrice'); // validate the new price\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validate the url parameter for car id sent to retrieve a car\r\n  static validateViewSpecficCarParams(carId) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.validateInt(carId, 'carId');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validate the query string sent for status\r\n  static validateViewUnsoldCarsQuery(status) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.isValidStatusQuery(status, 'status');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validate the query string for getting cars in a certain price range\r\n  static validateViewUnsoldCarsInPriceRange(status, minPrice, maxPrice) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.isValidStatusQuery(status, 'status');\r\n    ValidateCar.isValidPrice(minPrice, 'min_price');\r\n    ValidateCar.isValidPrice(maxPrice, 'max_price');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validate the url parameter for car id sent to delete a car\r\n  static validateDeleteACarParams(carId) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.validateInt(carId, 'carId');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validate the query string for getting cars that are used\r\n  static validateViewUnsoldNewCars(status, state) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.isValidStatusQuery(status, 'status');\r\n    ValidateCar.isValidState(state, 'state');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  static validateViewUnsoldCarsByManufacturer(status, manufacturer) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.isValidStatusQuery(status, 'status');\r\n    ValidateCar.validateString(manufacturer, 'manufacturer');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  static isValidState(state, field) {\r\n    if (ValidateCar.isEmptyString(state)) {\r\n      ValidateCar.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = state.toLowerCase();\r\n      if (str !== 'new' && str !== 'used') {\r\n        ValidateCar.integrateError(field, `Invalid ${field}. Must be [ new ] or [ used ].`);\r\n      }\r\n    }\r\n  }\r\n\r\n  static isValidStatus(status, field) {\r\n    if (ValidateCar.isEmptyString(status)) {\r\n      ValidateCar.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = status.toLowerCase();\r\n      if (str !== 'available') {\r\n        ValidateCar.integrateError(field, `Invalid ${field}. Must be [ available ].`);\r\n      }\r\n    }\r\n  }\r\n\r\n  static isValidNewStatus(status, field) {\r\n    if (ValidateCar.isEmptyString(status)) {\r\n      ValidateCar.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = status.toLowerCase();\r\n      if (str !== 'sold') {\r\n        ValidateCar.integrateError(field, `Invalid ${field}. Must be changed to [ sold ] in order to update the status.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  static isValidPrice(price, field) {\r\n    ValidateCar.validateFloat(price, field);\r\n  }\r\n\r\n  static isValidTitle(title, field) {\r\n    ValidateCar.validateString(title, field);\r\n  }\r\n\r\n  static isValidManufacturer(manufacturer, field) {\r\n    ValidateCar.validateString(manufacturer, field);\r\n  }\r\n\r\n  static isValidModel(model, field) {\r\n    ValidateCar.validateString(model, field);\r\n  }\r\n\r\n  static isValidBodyType(bodyType, field) {\r\n    if (ValidateCar.isEmptyString(bodyType)) {\r\n      ValidateCar.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = bodyType.toLowerCase();\r\n      const bodyT = [' Convertibles', ' Coupe',\r\n        ' SUV', ' Hatchback',\r\n        ' Sedan', ' Wagon',\r\n        ' Van', ' Truck',\r\n        ' Trailer truck', ' Tipper truck',\r\n        ' Bus', ' Motorbike',\r\n      ];\r\n      if (str !== 'convertibles' && str !== 'coupe'\r\n      && str !== 'suv' && str !== 'hatchback'\r\n      && str !== 'sedan' && str !== 'wagon'\r\n      && str !== 'van' && str !== 'truck'\r\n      && str !== 'trailer truck' && str !== 'tipper truck'\r\n      && str !== 'bus' && str !== 'motorbike') {\r\n        ValidateCar.integrateError(field, `Invalid ${field}. Each should be one of these: ${bodyT}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  static isValidPhoto(myPhoto, str) {\r\n    // console.log(myPhoto.photo.length === undefined);\r\n    if (!myPhoto.photo) {\r\n      ValidateCar.integrateError(str, `No ${str} submited.`);\r\n    } else if (myPhoto.photo.type !== 'image/jpeg' && myPhoto.photo.type !== 'image/png') {\r\n      ValidateCar.integrateError(str, `You didn't submit an ${str} type. jpg/png is accepted.`);\r\n    }\r\n  }\r\n\r\n  static isValidStatusQuery(status, query) {\r\n    if (status !== 'available') {\r\n      ValidateCar.integrateError(query, `The ${query} query string must be [ ?status=available ].`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ValidateCar;\r\n"],"file":"ValidateCar.js"}