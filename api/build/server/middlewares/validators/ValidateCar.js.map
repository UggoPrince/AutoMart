{"version":3,"sources":["../../../../server/middlewares/validators/ValidateCar.js"],"names":["ValidateCar","state","status","price","title","manufacturer","model","body_type","photo","refresh","isValidState","isValidStatus","isValidPrice","isValidTitle","isValidManufacturer","isValidModel","isValidBodyType","isValidPhoto","getErrorMessage","car_id","validateInt","isValidNewStatus","isValidStatusQuery","min_price","max_price","validateString","user_id","field","isEmptyString","integrateError","str","toLowerCase","validateFloat","bodyT","car_photo","type","query","Validator"],"mappings":";;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;IAEMA,W;;;;;;;;;;;;;gDAC+B;AACjCC,IAAAA,K,EAAOC,M,EAAQC,K,EAAOC,K,EAAOC,Y,EAAcC,K,EAAOC,S,EAAWC,K,EAC7D;AACAR,MAAAA,WAAW,CAACS,OAAZ;AACAT,MAAAA,WAAW,CAACU,YAAZ,CAAyBT,KAAzB,EAAgC,OAAhC,EAFA,CAE0C;;AAC1CD,MAAAA,WAAW,CAACW,aAAZ,CAA0BT,MAA1B,EAAkC,QAAlC,EAHA,CAG6C;;AAC7CF,MAAAA,WAAW,CAACY,YAAZ,CAAyBT,KAAzB,EAAgC,OAAhC,EAJA,CAI0C;;AAC1CH,MAAAA,WAAW,CAACa,YAAZ,CAAyBT,KAAzB,EAAgC,OAAhC,EALA,CAK0C;;AAC1CJ,MAAAA,WAAW,CAACc,mBAAZ,CAAgCT,YAAhC,EAA8C,cAA9C,EANA,CAM+D;;AAC/DL,MAAAA,WAAW,CAACe,YAAZ,CAAyBT,KAAzB,EAAgC,OAAhC,EAPA,CAO0C;;AAC1CN,MAAAA,WAAW,CAACgB,eAAZ,CAA4BT,SAA5B,EAAuC,WAAvC,EARA,CAQqD;;AACrDP,MAAAA,WAAW,CAACiB,YAAZ,CAAyBT,KAAzB,EAAgC,OAAhC,EATA,CAS0C;;AAC1C,aAAOR,WAAW,CAACkB,eAAZ,EAAP;AACD,K,CAED;;;;kDACqCC,M,EAAQjB,M,EAAQ;AACnDF,MAAAA,WAAW,CAACS,OAAZ;AACAT,MAAAA,WAAW,CAACoB,WAAZ,CAAwBD,MAAxB,EAAgC,QAAhC;AACAnB,MAAAA,WAAW,CAACqB,gBAAZ,CAA6BnB,MAA7B,EAAqC,QAArC;AACA,aAAOF,WAAW,CAACkB,eAAZ,EAAP;AACD,K,CAED;;;;gDACmCC,M,EAAQhB,K,EAAO;AAChDH,MAAAA,WAAW,CAACS,OAAZ;AACAT,MAAAA,WAAW,CAACoB,WAAZ,CAAwBD,MAAxB,EAAgC,QAAhC,EAFgD,CAEL;;AAC3CnB,MAAAA,WAAW,CAACY,YAAZ,CAAyBT,KAAzB,EAAgC,OAAhC,EAHgD,CAGN;;AAC1C,aAAOH,WAAW,CAACkB,eAAZ,EAAP;AACD,K,CAED;;;;iDACoCC,M,EAAQ;AAC1CnB,MAAAA,WAAW,CAACS,OAAZ;AACAT,MAAAA,WAAW,CAACoB,WAAZ,CAAwBD,MAAxB,EAAgC,QAAhC;AACA,aAAOnB,WAAW,CAACkB,eAAZ,EAAP;AACD,K,CAED;;;;gDACmChB,M,EAAQ;AACzCF,MAAAA,WAAW,CAACS,OAAZ;AACAT,MAAAA,WAAW,CAACsB,kBAAZ,CAA+BpB,MAA/B,EAAuC,QAAvC;AACA,aAAOF,WAAW,CAACkB,eAAZ,EAAP;AACD,K,CAED;;;;uDAC0ChB,M,EAAQqB,S,EAAWC,S,EAAW;AACtExB,MAAAA,WAAW,CAACS,OAAZ;AACAT,MAAAA,WAAW,CAACsB,kBAAZ,CAA+BpB,MAA/B,EAAuC,QAAvC;AACAF,MAAAA,WAAW,CAACY,YAAZ,CAAyBW,SAAzB,EAAoC,WAApC;AACAvB,MAAAA,WAAW,CAACY,YAAZ,CAAyBY,SAAzB,EAAoC,WAApC;AACA,aAAOxB,WAAW,CAACkB,eAAZ,EAAP;AACD,K,CAED;;;;6CACgCC,M,EAAQ;AACtCnB,MAAAA,WAAW,CAACS,OAAZ;AACAT,MAAAA,WAAW,CAACoB,WAAZ,CAAwBD,MAAxB,EAAgC,QAAhC;AACA,aAAOnB,WAAW,CAACkB,eAAZ,EAAP;AACD,K,CAED;;;;8CACiChB,M,EAAQD,K,EAAO;AAC9CD,MAAAA,WAAW,CAACS,OAAZ;AACAT,MAAAA,WAAW,CAACsB,kBAAZ,CAA+BpB,MAA/B,EAAuC,QAAvC;AACAF,MAAAA,WAAW,CAACU,YAAZ,CAAyBT,KAAzB,EAAgC,OAAhC;AACA,aAAOD,WAAW,CAACkB,eAAZ,EAAP;AACD;;;yDAE2ChB,M,EAAQG,Y,EAAc;AAChEL,MAAAA,WAAW,CAACS,OAAZ;AACAT,MAAAA,WAAW,CAACsB,kBAAZ,CAA+BpB,MAA/B,EAAuC,QAAvC;AACAF,MAAAA,WAAW,CAACyB,cAAZ,CAA2BpB,YAA3B,EAAyC,cAAzC;AACA,aAAOL,WAAW,CAACkB,eAAZ,EAAP;AACD,K,CAED;;;;+CACkCQ,O,EAAS;AACzC1B,MAAAA,WAAW,CAACS,OAAZ;AACAT,MAAAA,WAAW,CAACoB,WAAZ,CAAwBM,OAAxB,EAAiC,UAAjC;AACA,aAAO1B,WAAW,CAACkB,eAAZ,EAAP;AACD;;;iCAEmBjB,K,EAAO0B,K,EAAO;AAChC,UAAI3B,WAAW,CAAC4B,aAAZ,CAA0B3B,KAA1B,CAAJ,EAAsC;AACpCD,QAAAA,WAAW,CAAC6B,cAAZ,CAA2BF,KAA3B,eAAwCA,KAAxC;AACD,OAFD,MAEO;AACL,YAAMG,GAAG,GAAG7B,KAAK,CAAC8B,WAAN,EAAZ;;AACA,YAAID,GAAG,KAAK,KAAR,IAAiBA,GAAG,KAAK,MAA7B,EAAqC;AACnC9B,UAAAA,WAAW,CAAC6B,cAAZ,CAA2BF,KAA3B,oBAA6CA,KAA7C;AACD;AACF;AACF;;;kCAEoBzB,M,EAAQyB,K,EAAO;AAClC,UAAI3B,WAAW,CAAC4B,aAAZ,CAA0B1B,MAA1B,CAAJ,EAAuC;AACrCF,QAAAA,WAAW,CAAC6B,cAAZ,CAA2BF,KAA3B,eAAwCA,KAAxC;AACD,OAFD,MAEO;AACL,YAAMG,GAAG,GAAG5B,MAAM,CAAC6B,WAAP,EAAZ;;AACA,YAAID,GAAG,KAAK,WAAZ,EAAyB;AACvB9B,UAAAA,WAAW,CAAC6B,cAAZ,CAA2BF,KAA3B,oBAA6CA,KAA7C;AACD;AACF;AACF;;;qCAEuBzB,M,EAAQyB,K,EAAO;AACrC,UAAI3B,WAAW,CAAC4B,aAAZ,CAA0B1B,MAA1B,CAAJ,EAAuC;AACrCF,QAAAA,WAAW,CAAC6B,cAAZ,CAA2BF,KAA3B,eAAwCA,KAAxC;AACD,OAFD,MAEO;AACL,YAAMG,GAAG,GAAG5B,MAAM,CAAC6B,WAAP,EAAZ;;AACA,YAAID,GAAG,KAAK,MAAZ,EAAoB;AAClB9B,UAAAA,WAAW,CAAC6B,cAAZ,CAA2BF,KAA3B,oBAA6CA,KAA7C;AACD;AACF;AACF;;;iCAEmBxB,K,EAAOwB,K,EAAO;AAChC3B,MAAAA,WAAW,CAACgC,aAAZ,CAA0B7B,KAA1B,EAAiCwB,KAAjC;AACD;;;iCAEmBvB,K,EAAOuB,K,EAAO;AAChC3B,MAAAA,WAAW,CAACyB,cAAZ,CAA2BrB,KAA3B,EAAkCuB,KAAlC;AACD;;;wCAE0BtB,Y,EAAcsB,K,EAAO;AAC9C3B,MAAAA,WAAW,CAACyB,cAAZ,CAA2BpB,YAA3B,EAAyCsB,KAAzC;AACD;;;iCAEmBrB,K,EAAOqB,K,EAAO;AAChC3B,MAAAA,WAAW,CAACyB,cAAZ,CAA2BnB,KAA3B,EAAkCqB,KAAlC;AACD;;;oCAEsBpB,S,EAAWoB,K,EAAO;AACvC,UAAI3B,WAAW,CAAC4B,aAAZ,CAA0BrB,SAA1B,CAAJ,EAA0C;AACxCP,QAAAA,WAAW,CAAC6B,cAAZ,CAA2BF,KAA3B,eAAwCA,KAAxC;AACD,OAFD,MAEO;AACL,YAAMG,GAAG,GAAGvB,SAAS,CAACwB,WAAV,EAAZ;AACA,YAAME,KAAK,GAAG,CAAC,eAAD,EAAkB,QAAlB,EACZ,MADY,EACJ,YADI,EAEZ,QAFY,EAEF,QAFE,EAGZ,MAHY,EAGJ,QAHI,EAIZ,gBAJY,EAIM,eAJN,EAKZ,MALY,EAKJ,YALI,CAAd;;AAOA,YAAIH,GAAG,KAAK,cAAR,IAA0BA,GAAG,KAAK,OAAlC,IACDA,GAAG,KAAK,KADP,IACgBA,GAAG,KAAK,WADxB,IAEDA,GAAG,KAAK,OAFP,IAEkBA,GAAG,KAAK,OAF1B,IAGDA,GAAG,KAAK,KAHP,IAGgBA,GAAG,KAAK,OAHxB,IAIDA,GAAG,KAAK,eAJP,IAI0BA,GAAG,KAAK,cAJlC,IAKDA,GAAG,KAAK,KALP,IAKgBA,GAAG,KAAK,WAL5B,EAKyC;AACvC9B,UAAAA,WAAW,CAAC6B,cAAZ,CAA2BF,KAA3B,oBAA6CA,KAA7C,4CAAoFM,KAApF;AACD;AACF;AACF;;;iCAEmBC,S,EAAWJ,G,EAAK;AAClC;AACA,UAAI,CAACI,SAAS,CAAC1B,KAAf,EAAsB;AACpBR,QAAAA,WAAW,CAAC6B,cAAZ,CAA2BC,GAA3B,eAAsCA,GAAtC;AACD,OAFD,MAEO,IAAII,SAAS,CAAC1B,KAAV,CAAgB2B,IAAhB,KAAyB,YAAzB,IAAyCD,SAAS,CAAC1B,KAAV,CAAgB2B,IAAhB,KAAyB,WAAtE,EAAmF;AACxFnC,QAAAA,WAAW,CAAC6B,cAAZ,CAA2BC,GAA3B,iCAAwDA,GAAxD;AACD;AACF;;;uCAEyB5B,M,EAAQkC,K,EAAO;AACvC,UAAIlC,MAAM,KAAK,WAAf,EAA4B;AAC1BF,QAAAA,WAAW,CAAC6B,cAAZ,CAA2BO,KAA3B,gBAAyCA,KAAzC;AACD;AACF;;;;EAzKuBC,sB;;eA4KXrC,W","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable no-useless-constructor */\r\n/* eslint-disable camelcase */\r\nimport Validator from './Validator';\r\n\r\nclass ValidateCar extends Validator {\r\n  static validateCreateAdvertFields( // validates the fields that would creat an advert\r\n    state, status, price, title, manufacturer, model, body_type, photo,\r\n  ) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.isValidState(state, 'state'); // validate state\r\n    ValidateCar.isValidStatus(status, 'status'); // validate status\r\n    ValidateCar.isValidPrice(price, 'price'); // validate price\r\n    ValidateCar.isValidTitle(title, 'title'); // validate title\r\n    ValidateCar.isValidManufacturer(manufacturer, 'manufacturer'); // validate manufacturer\r\n    ValidateCar.isValidModel(model, 'model'); // validate model\r\n    ValidateCar.isValidBodyType(body_type, 'body_type'); // validate body_type\r\n    ValidateCar.isValidPhoto(photo, 'image'); // validate photo\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validates the field and url parameter sent to update a car status\r\n  static validateUpdateCarStatusFields(car_id, status) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.validateInt(car_id, 'car_id');\r\n    ValidateCar.isValidNewStatus(status, 'status');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validates the field and url parameter that updates a car price\r\n  static validatUpdateCarPriceFields(car_id, price) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.validateInt(car_id, 'car_id'); // validate car id\r\n    ValidateCar.isValidPrice(price, 'price'); // validate the new price\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validate the url parameter for car id sent to retrieve a car\r\n  static validateViewSpecficCarParams(car_id) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.validateInt(car_id, 'car_id');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validate the query string sent for status\r\n  static validateViewUnsoldCarsQuery(status) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.isValidStatusQuery(status, 'status');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validate the query string for getting cars in a certain price range\r\n  static validateViewUnsoldCarsInPriceRange(status, min_price, max_price) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.isValidStatusQuery(status, 'status');\r\n    ValidateCar.isValidPrice(min_price, 'min_price');\r\n    ValidateCar.isValidPrice(max_price, 'max_price');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validate the url parameter for car id sent to delete a car\r\n  static validateDeleteACarParams(car_id) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.validateInt(car_id, 'car_id');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validate the query string for getting cars that are used\r\n  static validateViewUnsoldNewCars(status, state) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.isValidStatusQuery(status, 'status');\r\n    ValidateCar.isValidState(state, 'state');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  static validateViewUnsoldCarsByManufacturer(status, manufacturer) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.isValidStatusQuery(status, 'status');\r\n    ValidateCar.validateString(manufacturer, 'manufacturer');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  // validate getting all cars of a user\r\n  static validateViewAllCarsOfOwner(user_id) {\r\n    ValidateCar.refresh();\r\n    ValidateCar.validateInt(user_id, 'onwer id');\r\n    return ValidateCar.getErrorMessage();\r\n  }\r\n\r\n  static isValidState(state, field) {\r\n    if (ValidateCar.isEmptyString(state)) {\r\n      ValidateCar.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = state.toLowerCase();\r\n      if (str !== 'new' && str !== 'used') {\r\n        ValidateCar.integrateError(field, `Invalid ${field}. Must be [ new ] or [ used ].`);\r\n      }\r\n    }\r\n  }\r\n\r\n  static isValidStatus(status, field) {\r\n    if (ValidateCar.isEmptyString(status)) {\r\n      ValidateCar.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = status.toLowerCase();\r\n      if (str !== 'available') {\r\n        ValidateCar.integrateError(field, `Invalid ${field}. Must be [ available ].`);\r\n      }\r\n    }\r\n  }\r\n\r\n  static isValidNewStatus(status, field) {\r\n    if (ValidateCar.isEmptyString(status)) {\r\n      ValidateCar.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = status.toLowerCase();\r\n      if (str !== 'sold') {\r\n        ValidateCar.integrateError(field, `Invalid ${field}. Must be changed to [ sold ] in order to update the status.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  static isValidPrice(price, field) {\r\n    ValidateCar.validateFloat(price, field);\r\n  }\r\n\r\n  static isValidTitle(title, field) {\r\n    ValidateCar.validateString(title, field);\r\n  }\r\n\r\n  static isValidManufacturer(manufacturer, field) {\r\n    ValidateCar.validateString(manufacturer, field);\r\n  }\r\n\r\n  static isValidModel(model, field) {\r\n    ValidateCar.validateString(model, field);\r\n  }\r\n\r\n  static isValidBodyType(body_type, field) {\r\n    if (ValidateCar.isEmptyString(body_type)) {\r\n      ValidateCar.integrateError(field, `No ${field} entered.`);\r\n    } else {\r\n      const str = body_type.toLowerCase();\r\n      const bodyT = [' Convertibles', ' Coupe',\r\n        ' SUV', ' Hatchback',\r\n        ' Sedan', ' Wagon',\r\n        ' Van', ' Truck',\r\n        ' Trailer truck', ' Tipper truck',\r\n        ' Bus', ' Motorbike',\r\n      ];\r\n      if (str !== 'convertibles' && str !== 'coupe'\r\n      && str !== 'suv' && str !== 'hatchback'\r\n      && str !== 'sedan' && str !== 'wagon'\r\n      && str !== 'van' && str !== 'truck'\r\n      && str !== 'trailer truck' && str !== 'tipper truck'\r\n      && str !== 'bus' && str !== 'motorbike') {\r\n        ValidateCar.integrateError(field, `Invalid ${field}. Each should be one of these: ${bodyT}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  static isValidPhoto(car_photo, str) {\r\n    // console.log(myPhoto.photo.length === undefined);\r\n    if (!car_photo.photo) {\r\n      ValidateCar.integrateError(str, `No ${str} submited.`);\r\n    } else if (car_photo.photo.type !== 'image/jpeg' && car_photo.photo.type !== 'image/png') {\r\n      ValidateCar.integrateError(str, `You didn't submit an ${str} type. jpg/png is accepted.`);\r\n    }\r\n  }\r\n\r\n  static isValidStatusQuery(status, query) {\r\n    if (status !== 'available') {\r\n      ValidateCar.integrateError(query, `The ${query} query string must be [ ?status=available ].`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ValidateCar;\r\n"],"file":"ValidateCar.js"}