{"version":3,"sources":["../../../../server/middlewares/validators/Validator.js"],"names":["error","errorMessages","Validator","field","message","str","space","undefined","test","int","intRegExp","isEmptyString","integrateError","float","regExp","data","status"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;AAEA,IAAIA,KAAK,GAAG,KAAZ;AACA,IAAIC,aAAa,GAAG,EAApB;;IAEMC,S;;;;;;;;;mCACkBC,K,EAAOC,O,EAAS;AACpCJ,MAAAA,KAAK,GAAG,IAAR;AACAC,MAAAA,aAAa,CAACE,KAAD,CAAb,GAAuBC,OAAvB;AACD;;;kCAEoBC,G,EAAK;AACxB,UAAMC,KAAK,GAAG,OAAd;;AACA,UAAID,GAAG,KAAK,EAAR,IAAcA,GAAG,KAAK,IAAtB,IAA8BA,GAAG,KAAKE,SAAtC,IAAmDD,KAAK,CAACE,IAAN,CAAWH,GAAX,CAAvD,EAAwE;AAAE,eAAO,IAAP;AAAc;;AACxF,aAAO,KAAP;AACD;;;gCAEkBI,I,EAAKN,K,EAAO;AAC7B,UAAMO,SAAS,GAAG,OAAlB;;AACA,UAAIR,SAAS,CAACS,aAAV,CAAwBF,IAAxB,CAAJ,EAAkC;AAChCP,QAAAA,SAAS,CAACU,cAAV,CAAyBT,KAAzB,eAAsCA,KAAtC;AACD,OAFD,MAEO,IAAI,CAACO,SAAS,CAACF,IAAV,CAAeC,IAAf,CAAD,IAAwBA,IAAG,KAAK,GAApC,EAAyC;AAC9CP,QAAAA,SAAS,CAACU,cAAV,CAAyBT,KAAzB,oBAA2CA,KAA3C;AACD;AACF;;;kCAEoBU,M,EAAOV,K,EAAO;AACjC,UAAMW,MAAM,GAAG,mBAAf;;AACA,UAAIZ,SAAS,CAACS,aAAV,CAAwBE,MAAxB,CAAJ,EAAoC;AAClCX,QAAAA,SAAS,CAACU,cAAV,CAAyBT,KAAzB,eAAsCA,KAAtC;AACD,OAFD,MAEO,IAAI,CAACW,MAAM,CAACN,IAAP,CAAYK,MAAZ,CAAD,IAAuBA,MAAK,KAAK,GAAjC,IAAwCA,MAAK,KAAK,KAAtD,EAA6D;AAClEX,QAAAA,SAAS,CAACU,cAAV,CAAyBT,KAAzB,oBAA2CA,KAA3C;AACD;AACF;;;mCAEqBE,G,EAAKF,K,EAAO;AAChC,UAAMW,MAAM,GAAG,cAAf;;AACA,UAAIZ,SAAS,CAACS,aAAV,CAAwBN,GAAxB,CAAJ,EAAkC;AAChCH,QAAAA,SAAS,CAACU,cAAV,CAAyBT,KAAzB,eAAsCA,KAAtC;AACD,OAFD,MAEO,IAAI,CAACW,MAAM,CAACN,IAAP,CAAYH,GAAZ,CAAL,EAAuB;AAC5BH,QAAAA,SAAS,CAACU,cAAV,CAAyBT,KAAzB,oBAA2CA,KAA3C;AACD;AACF;;;sCAEwB;AACvB,aAAO;AAAEH,QAAAA,KAAK,EAALA,KAAF;AAASe,QAAAA,IAAI,EAAEd;AAAf,OAAP;AACD;;;+BAEiB;AAChB,aAAO;AACLe,QAAAA,MAAM,EAAE,GADH;AAELhB,QAAAA,KAAK,EAAEC;AAFF,OAAP;AAID;;;8BAEgB;AACfD,MAAAA,KAAK,GAAG,KAAR;AACAC,MAAAA,aAAa,GAAG,EAAhB;AACD;;;;;;eAGYC,S","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\n\r\nlet error = false;\r\nlet errorMessages = {};\r\n\r\nclass Validator {\r\n  static integrateError(field, message) {\r\n    error = true;\r\n    errorMessages[field] = message;\r\n  }\r\n\r\n  static isEmptyString(str) {\r\n    const space = /^\\s*$/;\r\n    if (str === '' || str === null || str === undefined || space.test(str)) { return true; }\r\n    return false;\r\n  }\r\n\r\n  static validateInt(int, field) {\r\n    const intRegExp = /^\\d+$/;\r\n    if (Validator.isEmptyString(int)) {\r\n      Validator.integrateError(field, `No ${field} entered.`);\r\n    } else if (!intRegExp.test(int) || int === '0') {\r\n      Validator.integrateError(field, `Invalid ${field}.`);\r\n    }\r\n  }\r\n\r\n  static validateFloat(float, field) {\r\n    const regExp = /^\\d+(.{1}[\\d]+)?$/;\r\n    if (Validator.isEmptyString(float)) {\r\n      Validator.integrateError(field, `No ${field} entered.`);\r\n    } else if (!regExp.test(float) || float === '0' || float === '0.0') {\r\n      Validator.integrateError(field, `Invalid ${field}.`);\r\n    }\r\n  }\r\n\r\n  static validateString(str, field) {\r\n    const regExp = /^[\\w ]+[^_]$/;\r\n    if (Validator.isEmptyString(str)) {\r\n      Validator.integrateError(field, `No ${field} entered.`);\r\n    } else if (!regExp.test(str)) {\r\n      Validator.integrateError(field, `Invalid ${field}.`);\r\n    }\r\n  }\r\n\r\n  static getErrorMessage() {\r\n    return { error, data: errorMessages };\r\n  }\r\n\r\n  static Response() {\r\n    return {\r\n      status: 400,\r\n      error: errorMessages,\r\n    };\r\n  }\r\n\r\n  static refresh() {\r\n    error = false;\r\n    errorMessages = {};\r\n  }\r\n}\r\n\r\nexport default Validator;\r\n"],"file":"Validator.js"}