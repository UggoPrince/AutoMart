{"version":3,"sources":["../../../../server/middlewares/validators/ValidateUser.js"],"names":["ValidateUser","first_name","last_name","email","password","address","refresh","isValidName","isValidAddress","isValidEmail","isValidPassword","getErrorMessage","name","field","isEmptyString","integrateError","emailRegExp","test","Validator"],"mappings":";;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;IAEMA,Y;;;;;;;;;;;;;yCACwBC,U,EAAYC,S,EAAWC,K,EAAOC,Q,EAAUC,O,EAAS;AAC3EL,MAAAA,YAAY,CAACM,OAAb;AACAN,MAAAA,YAAY,CAACO,WAAb,CAAyBN,UAAzB,EAAqC,YAArC,EAF2E,CAEvB;;AACpDD,MAAAA,YAAY,CAACO,WAAb,CAAyBL,SAAzB,EAAoC,WAApC,EAH2E,CAGzB;;AAClDF,MAAAA,YAAY,CAACQ,cAAb,CAA4BH,OAA5B,EAAqC,SAArC,EAJ2E,CAI1B;;AACjDL,MAAAA,YAAY,CAACS,YAAb,CAA0BN,KAA1B,EAAiC,OAAjC,EAL2E,CAKhC;;AAC3CH,MAAAA,YAAY,CAACU,eAAb,CAA6BN,QAA7B,EAAuC,UAAvC,EAN2E,CAMvB;;AACpD,aAAOJ,YAAY,CAACW,eAAb,EAAP;AACD;;;yCAE2BR,K,EAAOC,Q,EAAU;AAC3CJ,MAAAA,YAAY,CAACM,OAAb;AACAN,MAAAA,YAAY,CAACS,YAAb,CAA0BN,KAA1B,EAAiC,OAAjC,EAF2C,CAEA;;AAC3CH,MAAAA,YAAY,CAACU,eAAb,CAA6BN,QAA7B,EAAuC,UAAvC,EAH2C,CAGS;;AACpD,aAAOJ,YAAY,CAACW,eAAb,EAAP;AACD;;;gCAEkBC,I,EAAMC,K,EAAO;AAC9B,UAAIb,YAAY,CAACc,aAAb,CAA2BF,IAA3B,CAAJ,EAAsC;AACpCZ,QAAAA,YAAY,CAACe,cAAb,CAA4BF,KAA5B,eAAyCA,KAAzC;AACD;AACF;;;mCAEqBR,O,EAASQ,K,EAAO;AACpC,UAAIb,YAAY,CAACc,aAAb,CAA2BT,OAA3B,CAAJ,EAAyC;AACvCL,QAAAA,YAAY,CAACe,cAAb,CAA4BF,KAA5B,eAAyCA,KAAzC;AACD;AACF;;;iCAEmBV,K,EAAOU,K,EAAO;AAChC,UAAMG,WAAW,GAAG,+IAApB;;AACA,UAAIhB,YAAY,CAACc,aAAb,CAA2BX,KAA3B,CAAJ,EAAuC;AACrCH,QAAAA,YAAY,CAACe,cAAb,CAA4BF,KAA5B,eAAyCA,KAAzC;AACD,OAFD,MAEO,IAAI,CAACG,WAAW,CAACC,IAAZ,CAAiBd,KAAjB,CAAL,EAA8B;AACnCH,QAAAA,YAAY,CAACe,cAAb,CAA4BF,KAA5B,oBAA8CA,KAA9C;AACD;AACF;;;oCAEsBT,Q,EAAUS,K,EAAO;AACtC,UAAIb,YAAY,CAACc,aAAb,CAA2BV,QAA3B,CAAJ,EAA0C;AACxCJ,QAAAA,YAAY,CAACe,cAAb,CAA4BF,KAA5B,eAAyCA,KAAzC;AACD;AACF;;;;EA3CwBK,sB;;eA8CZlB,Y","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable no-useless-constructor */\r\n/* eslint-disable no-control-regex */\r\n/* eslint-disable class-methods-use-ValidateUser */\r\n/* eslint-disable camelcase */\r\nimport Validator from './Validator';\r\n\r\nclass ValidateUser extends Validator {\r\n  static validateSignupFields(first_name, last_name, email, password, address) {\r\n    ValidateUser.refresh();\r\n    ValidateUser.isValidName(first_name, 'first_name'); // validate firstname\r\n    ValidateUser.isValidName(last_name, 'last_name'); // validate lastname\r\n    ValidateUser.isValidAddress(address, 'address'); // validate address\r\n    ValidateUser.isValidEmail(email, 'email'); // validate email\r\n    ValidateUser.isValidPassword(password, 'password'); // validate password\r\n    return ValidateUser.getErrorMessage();\r\n  }\r\n\r\n  static validateSigninFields(email, password) {\r\n    ValidateUser.refresh();\r\n    ValidateUser.isValidEmail(email, 'email'); // validate email\r\n    ValidateUser.isValidPassword(password, 'password'); // validate password\r\n    return ValidateUser.getErrorMessage();\r\n  }\r\n\r\n  static isValidName(name, field) {\r\n    if (ValidateUser.isEmptyString(name)) {\r\n      ValidateUser.integrateError(field, `No ${field} entered.`);\r\n    }\r\n  }\r\n\r\n  static isValidAddress(address, field) {\r\n    if (ValidateUser.isEmptyString(address)) {\r\n      ValidateUser.integrateError(field, `No ${field} entered.`);\r\n    }\r\n  }\r\n\r\n  static isValidEmail(email, field) {\r\n    const emailRegExp = /^(([^<>()\\\\[\\]\\\\.,;:@\"\\x00-\\x20\\x7F]|\\\\.)+|(\"\"\"([^\\x0A\\x0D\"\\\\]|\\\\\\\\)+\"\"\"))@(([a-z]|#\\d+?)([a-z0-9-]|#\\d+?)*([a-z0-9]|#\\d+?)\\.)+([a-z]{2,4})$/i;\r\n    if (ValidateUser.isEmptyString(email)) {\r\n      ValidateUser.integrateError(field, `No ${field} entered.`);\r\n    } else if (!emailRegExp.test(email)) {\r\n      ValidateUser.integrateError(field, `Invalid ${field}.`);\r\n    }\r\n  }\r\n\r\n  static isValidPassword(password, field) {\r\n    if (ValidateUser.isEmptyString(password)) {\r\n      ValidateUser.integrateError(field, `No ${field} entered`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ValidateUser;\r\n"],"file":"ValidateUser.js"}