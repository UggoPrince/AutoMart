{"version":3,"sources":["../../../server/middlewares/CarsMiddleware.js"],"names":["validateCreateAdvert","req","res","next","body","state","status","price","title","manufacturer","model","bodyType","myPhoto","files","result","Validator","validateCreateAdvertFields","error","send","Response","owner","token","id","email","validateUpdateCarStatus","newStatus","carId","params","car_id","validateUpdateCarStatusFields","CarChecker","checkId","validateUpdateCarPrice","newPrice","validatUpdateCarPriceFields","validateViewACar","validateViewSpecficCarParams","validateViewCars","rQuery","query","qLength","Object","keys","length","isZero","isOne","isTwo","isThree","isAdmin","validateViewUnsoldCarsQuery","validateViewAllCarsOfOwner","userId","parseInt","validateViewUnsoldNewCars","validateViewUnsoldCarsByManufacturer","min_price","max_price","validateViewUnsoldCarsInPriceRange","validateDeleteCar","validateDeleteACarParams"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\nimport Validator from './validators/ValidateCar';\r\nimport CarChecker from './database_checkers/CarChecker';\r\nimport { errorInvalidQueryString } from '../helpers/errorHandlers';\r\n\r\nexport const validateCreateAdvert = async (req, res, next) => {\r\n  const {\r\n    state, status, price, title, manufacturer, model, bodyType,\r\n  } = req.body;\r\n  const myPhoto = req.files;\r\n  const result = Validator.validateCreateAdvertFields(\r\n    state, status, price, title, manufacturer, model, bodyType, myPhoto,\r\n  );\r\n  if (result.error) {\r\n    res.status(400).send(Validator.Response());\r\n  } else {\r\n    req.body.owner = req.token.id;\r\n    req.body.email = req.token.email;\r\n    next();\r\n  }\r\n};\r\n\r\nexport const validateUpdateCarStatus = async (req, res, next) => {\r\n  const { newStatus } = req.body;\r\n  const carId = req.params.car_id;\r\n  const result = Validator.validateUpdateCarStatusFields(carId, newStatus);\r\n  if (result.error) {\r\n    res.status(400).send(Validator.Response());\r\n  } else if (!await CarChecker.checkId(carId)) {\r\n    res.status(404).send({\r\n      status: 404,\r\n      error: `Car with id (${carId}) does not exist.`,\r\n    });\r\n  } else {\r\n    req.body.email = req.token.email;\r\n    next();\r\n  }\r\n};\r\n\r\nexport const validateUpdateCarPrice = async (req, res, next) => {\r\n  const { newPrice } = req.body;\r\n  const carId = req.params.car_id;\r\n  const result = Validator.validatUpdateCarPriceFields(carId, newPrice);\r\n  if (result.error) {\r\n    res.status(400).send(Validator.Response());\r\n  } else if (!await CarChecker.checkId(carId)) {\r\n    res.status(404).send({\r\n      status: 404,\r\n      error: `Car with id (${carId}) does not exist.`,\r\n    });\r\n  } else {\r\n    req.body.email = req.token.email;\r\n    next();\r\n  }\r\n};\r\n\r\nexport const validateViewACar = async (req, res, next) => {\r\n  const carId = req.params.car_id;\r\n  const result = Validator.validateViewSpecficCarParams(carId);\r\n  if (result.error) {\r\n    res.status(400).send(Validator.Response());\r\n  } else if (!await CarChecker.checkId(carId)) {\r\n    res.status(404).send({\r\n      status: 404,\r\n      error: `Car with id (${carId}) do not exist.`,\r\n    });\r\n  } else {\r\n    next();\r\n  }\r\n};\r\n\r\nexport const validateViewCars = (req, res, next) => {\r\n  const rQuery = req.query;\r\n  const qLength = Object.keys(req.query).length;\r\n  const isZero = qLength === 0;\r\n  const isOne = qLength > 0 && qLength === 1;\r\n  const isTwo = qLength > 0 && qLength === 2;\r\n  const isThree = qLength > 0 && qLength === 3;\r\n  if (isZero) {\r\n    if (!req.token.isAdmin) {\r\n      res.status(403).send({\r\n        status: 403,\r\n        error: 'You are not an admin. Only admins are allowed to view both sold and unsold cars.',\r\n      });\r\n    } else {\r\n      req.qLength = 0;\r\n      next();\r\n    }\r\n  } else if (isOne) {\r\n    if (rQuery.status) { // getting all available cars\r\n      const result = Validator.validateViewUnsoldCarsQuery(rQuery.status);\r\n      if (result.error) {\r\n        res.status(400).send(Validator.Response());\r\n      } else {\r\n        req.qLength = 1;\r\n        next();\r\n      }\r\n    } else if (rQuery.owner) { // getting all cars of a particular owner\r\n      const result = Validator.validateViewAllCarsOfOwner(rQuery.owner);\r\n      const userId = parseInt(rQuery.owner, 10);\r\n      if (result.error) {\r\n        res.status(400).send(Validator.Response());\r\n      } else if (userId !== req.token.id) {\r\n        res.status(400).send({ status: 400, error: 'invalid owner.' });\r\n      } else {\r\n        req.qLength = 1;\r\n        next();\r\n      }\r\n    } else {\r\n      res.status(400).send(errorInvalidQueryString());\r\n    }\r\n  } else if (isTwo) {\r\n    if (rQuery.status && rQuery.state) {\r\n      const result = Validator.validateViewUnsoldNewCars(rQuery.status, rQuery.state);\r\n      if (result.error) {\r\n        res.status(400).send(Validator.Response());\r\n      } else {\r\n        req.qLength = 2;\r\n        next();\r\n      }\r\n    } else if (rQuery.status && rQuery.manufacturer) {\r\n      const result = Validator.validateViewUnsoldCarsByManufacturer(\r\n        rQuery.status, rQuery.manufacturer,\r\n      );\r\n      if (result.error) {\r\n        res.status(400).send(Validator.Response());\r\n      } else {\r\n        req.qLength = 2;\r\n        next();\r\n      }\r\n    } else res.status(400).send(errorInvalidQueryString());\r\n  } else if (isThree && rQuery.min_price && rQuery.max_price) {\r\n    const result = Validator.validateViewUnsoldCarsInPriceRange(\r\n      rQuery.status, rQuery.min_price, rQuery.max_price,\r\n    );\r\n    if (result.error) {\r\n      res.status(400).send(Validator.Response());\r\n    } else {\r\n      req.qLength = 3;\r\n      next();\r\n    }\r\n  } else {\r\n    res.status(400).send(errorInvalidQueryString());\r\n  }\r\n};\r\n\r\nexport const validateDeleteCar = async (req, res, next) => {\r\n  const carId = req.params.car_id;\r\n  const result = Validator.validateDeleteACarParams(carId);\r\n  if (result.error) {\r\n    res.status(400).send(Validator.Response());\r\n  } else if (!req.token.isAdmin) {\r\n    res.status(403).send({\r\n      status: 403, error: 'You are not an admin. Only admin are allowed to delete an Advert',\r\n    });\r\n  } else if (!await CarChecker.checkId(carId)) {\r\n    res.status(404).send({ status: 404, error: `Car with id (${carId}) does not exist.` });\r\n  } else {\r\n    next();\r\n  }\r\n};\r\n"],"file":"CarsMiddleware.js"}