{"version":3,"sources":["../../../server/middlewares/AuthMiddleware.js"],"names":["dotenv","config","AuthMiddleware","data","JWT","sign","process","env","tokenSecret","expiresIn","tokenTime","req","res","next","sentToken","get","token","status","send","slice","length","verifyToken","jwt","tokenExp","decode","verify","err","error"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEAA,mBAAOC,MAAP;;IAEMC,c;;;;;;;;;8BAWMC,I,EAAM;AACd,aAAOC,yBAAIC,IAAJ,CAASF,IAAT,YAAkBG,OAAO,CAACC,GAAR,CAAYC,WAA9B,GACL;AAAEC,QAAAA,SAAS,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAAzB,OADK,CAAP;AAED;;;;;;+CAEkBC,G,EAAKC,G,EAAKC,I;;;;;;AACrBC,gBAAAA,S,GAAYH,GAAG,CAACI,GAAJ,CAAQ,eAAR,C;AACdC,gBAAAA,K,GAAQ,E;;oBACPF,S;;;;;AACHF,gBAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mCAArB;;;;;AAEAF,gBAAAA,KAAK,GAAGF,SAAS,CAACK,KAAV,CAAgB,CAAhB,EAAmBL,SAAS,CAACM,MAA7B,CAAR;;uBACkBlB,cAAc,CAACmB,WAAf,CAA2BL,KAA3B,C;;;AAAZM,gBAAAA,G;;AACN,oBAAIA,GAAG,CAACC,QAAR,EAAkB;AAChBX,kBAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB;AACD,iBAFD,MAEO;AACLP,kBAAAA,GAAG,CAACK,KAAJ,GAAYM,GAAG,CAACE,MAAhB;AACAX,kBAAAA,IAAI;AACL;;;;;;;;;;;;;;;;;;;;;gDA5BoBC,S;;;;;;;uBACHV,yBAAIqB,MAAJ,CAAWX,SAAX,YAAyBR,OAAO,CAACC,GAAR,CAAYC,WAArC,GAAoD,UAACkB,GAAD,EAAMF,MAAN,EAAiB;AACvF,sBAAIE,GAAJ,EAAS;AACP,2BAAO;AAAEH,sBAAAA,QAAQ,EAAE,IAAZ;AAAkBI,sBAAAA,KAAK,EAAED;AAAzB,qBAAP;AACD;;AACD,yBAAO;AAAEH,oBAAAA,QAAQ,EAAE,KAAZ;AAAmBC,oBAAAA,MAAM,EAANA;AAAnB,mBAAP;AACD,iBALmB,C;;;AAAdR,gBAAAA,K;kDAMCA,K;;;;;;;;;;;;;;;;;;;;;eA0BI,IAAId,cAAJ,E","sourcesContent":["/* eslint-disable class-methods-use-this */\nimport JWT from 'jsonwebtoken';\nimport dotenv from 'dotenv';\nimport { errorNoHeader, errorExpiredToken } from '../helpers/errorHandlers';\n\ndotenv.config();\n\nclass AuthMiddleware {\n  static async verifyToken(sentToken) {\n    const token = await JWT.verify(sentToken, `${process.env.tokenSecret}`, (err, decode) => {\n      if (err) {\n        return { tokenExp: true, error: err };\n      }\n      return { tokenExp: false, decode };\n    });\n    return token;\n  }\n\n  signToken(data) {\n    return JWT.sign(data, `${process.env.tokenSecret}`,\n      { expiresIn: process.env.tokenTime });\n  }\n\n  async authenticate(req, res, next) {\n    const sentToken = req.get('Authorization');\n    let token = '';\n    if (!sentToken) {\n      res.status(401).send(errorNoHeader());\n    } else {\n      token = sentToken.slice(7, sentToken.length);\n      const jwt = await AuthMiddleware.verifyToken(token);\n      if (jwt.tokenExp) {\n        res.status(401).send(errorExpiredToken());\n      } else {\n        req.token = jwt.decode;\n        next();\n      }\n    }\n  }\n}\n\nexport default new AuthMiddleware();\n"],"file":"AuthMiddleware.js"}