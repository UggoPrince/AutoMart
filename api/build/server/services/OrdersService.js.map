{"version":3,"sources":["../../../server/services/OrdersService.js"],"names":["OrdersService","orders","ordersData","carPrice","map","data","order","Orders","id","buyer","car_id","amount","status","created_on","getAllOrders","i","length","exist","price","price_offered","error","carId","allOrders","Date","now","push","getOrderById","newAmount","oldAmount","old_price_offered","new_price_offered"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable consistent-return */\r\nimport Orders from '../models/Orders';\r\nimport ordersData from '../database/orders';\r\n\r\nclass OrdersService {\r\n  constructor() {\r\n    this.orders = ordersData;\r\n    this.carPrice = null;\r\n  }\r\n\r\n  getAllOrders() {\r\n    return this.orders.map((data) => {\r\n      const order = new Orders();\r\n      order.id = data.id;\r\n      order.buyer = data.buyer;\r\n      order.car_id = data.buyer;\r\n      order.amount = data.amount;\r\n      order.status = data.status;\r\n      order.created_on = data.created_on;\r\n      return order;\r\n    });\r\n  }\r\n\r\n  getOrderById(id) {\r\n    const orders = this.getAllOrders();\r\n    for (let i = 0; i < orders.length; i += 1) {\r\n      if (orders[i].id === id) {\r\n        return {\r\n          exist: true,\r\n          data: {\r\n            id: orders[i].id,\r\n            car_id: orders[i].car_id,\r\n            status: orders[i].status,\r\n            price: this.carPrice,\r\n            price_offered: orders[i].amount,\r\n          },\r\n        };\r\n      }\r\n    }\r\n    return { exist: false, error: 'no order with this id.' };\r\n  }\r\n\r\n  order(buyer, carId, amount, carPrice) {\r\n    this.carPrice = carPrice;\r\n    const allOrders = this.orders.length;\r\n    const id = allOrders + 1;\r\n    const order = {\r\n      id,\r\n      buyer,\r\n      car_id: carId,\r\n      amount,\r\n      status: 'pending',\r\n      created_on: Date.now(),\r\n    };\r\n    this.orders.push(order);\r\n    return this.getOrderById(id);\r\n  }\r\n\r\n  update(id, newAmount) {\r\n    const order = this.getOrderById(id).data;\r\n    const oldAmount = order.price_offered;\r\n    for (let i = 0; i < this.orders.length; i += 1) {\r\n      if (this.orders[i].id === id) {\r\n        this.orders[i].amount = newAmount;\r\n      }\r\n    }\r\n    return {\r\n      id: order.id,\r\n      car_id: order.car_id,\r\n      status: order.status,\r\n      old_price_offered: oldAmount,\r\n      new_price_offered: newAmount,\r\n    };\r\n  }\r\n}\r\n\r\nexport default new OrdersService();\r\n"],"file":"OrdersService.js"}