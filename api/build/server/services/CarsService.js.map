{"version":3,"sources":["../../../server/services/CarsService.js"],"names":["dotenv","config","cloudinary","cloudiner","v2","cloud_name","process","env","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","CarsService","cars","carsData","userEmail","map","data","car","Cars","id","owner","created_on","state","status","price","title","manufacturer","model","body_type","photo","getAllCars","i","length","exist","email","error","unsoldCars","push","minPrice","maxPrice","unsoldCarsInPriceRange","field","getCarsByStatusAndState","bodyType","myPhoto","ownerEmail","filePath","path","uploader","upload","folder","CLOUDINARY_AUTOMART_FOLDER","use_filename","err","result","uploadedImg","allCars","Date","now","url","getCarById","carId","newField","newStatus","updater","newPrice","splice"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEAA,mBAAOC,MAAP;;AACA,IAAMC,UAAU,GAAGC,uBAAUC,EAA7B,C,CACA;;AACAF,UAAU,CAACD,MAAX,CAAkB;AAChBI,EAAAA,UAAU,EAAEC,OAAO,CAACC,GAAR,CAAYC,qBADR;AAEhBC,EAAAA,OAAO,EAAEH,OAAO,CAACC,GAAR,CAAYG,kBAFL;AAGhBC,EAAAA,UAAU,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHR,CAAlB;;IAMMC,W;;;AACJ,yBAAc;AAAA;;AACZ,SAAKC,IAAL,GAAYC,gBAAZ;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACD;;;;iCAEY;AACX,aAAO,KAAKF,IAAL,CAAUG,GAAV,CAAc,UAACC,IAAD,EAAU;AAC7B,YAAMC,GAAG,GAAG,IAAIC,gBAAJ,EAAZ;AACAD,QAAAA,GAAG,CAACE,EAAJ,GAASH,IAAI,CAACG,EAAd;AACAF,QAAAA,GAAG,CAACG,KAAJ,GAAYJ,IAAI,CAACI,KAAjB;AACAH,QAAAA,GAAG,CAACI,UAAJ,GAAiBL,IAAI,CAACK,UAAtB;AACAJ,QAAAA,GAAG,CAACK,KAAJ,GAAYN,IAAI,CAACM,KAAjB;AACAL,QAAAA,GAAG,CAACM,MAAJ,GAAaP,IAAI,CAACO,MAAlB;AACAN,QAAAA,GAAG,CAACO,KAAJ,GAAYR,IAAI,CAACQ,KAAjB;AACAP,QAAAA,GAAG,CAACQ,KAAJ,GAAYT,IAAI,CAACS,KAAjB;AACAR,QAAAA,GAAG,CAACS,YAAJ,GAAmBV,IAAI,CAACU,YAAxB;AACAT,QAAAA,GAAG,CAACU,KAAJ,GAAYX,IAAI,CAACW,KAAjB;AACAV,QAAAA,GAAG,CAACW,SAAJ,GAAgBZ,IAAI,CAACY,SAArB;AACAX,QAAAA,GAAG,CAACY,KAAJ,GAAYb,IAAI,CAACa,KAAjB;AACA,eAAOZ,GAAP;AACD,OAdM,CAAP;AAeD;;;+BAEUE,E,EAAI;AACb,UAAMP,IAAI,GAAG,KAAKkB,UAAL,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,IAAI,CAACoB,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvC,YAAInB,IAAI,CAACmB,CAAD,CAAJ,CAAQZ,EAAR,KAAeA,EAAnB,EAAuB;AACrB,iBAAO;AACLc,YAAAA,KAAK,EAAE,IADF;AAELjB,YAAAA,IAAI,EAAE;AACJG,cAAAA,EAAE,EAAEP,IAAI,CAACmB,CAAD,CAAJ,CAAQZ,EADR;AAEJe,cAAAA,KAAK,EAAE,KAAKpB,SAFR;AAGJO,cAAAA,UAAU,EAAET,IAAI,CAACmB,CAAD,CAAJ,CAAQV,UAHhB;AAIJK,cAAAA,YAAY,EAAEd,IAAI,CAACmB,CAAD,CAAJ,CAAQL,YAJlB;AAKJC,cAAAA,KAAK,EAAEf,IAAI,CAACmB,CAAD,CAAJ,CAAQJ,KALX;AAMJC,cAAAA,SAAS,EAAEhB,IAAI,CAACmB,CAAD,CAAJ,CAAQH,SANf;AAOJN,cAAAA,KAAK,EAAEV,IAAI,CAACmB,CAAD,CAAJ,CAAQT,KAPX;AAQJC,cAAAA,MAAM,EAAEX,IAAI,CAACmB,CAAD,CAAJ,CAAQR,MARZ;AASJC,cAAAA,KAAK,EAAEZ,IAAI,CAACmB,CAAD,CAAJ,CAAQP,KATX;AAUJC,cAAAA,KAAK,EAAEb,IAAI,CAACmB,CAAD,CAAJ,CAAQN,KAVX;AAWJI,cAAAA,KAAK,EAAEjB,IAAI,CAACmB,CAAD,CAAJ,CAAQF;AAXX,aAFD;AAeLZ,YAAAA,GAAG,EAAEL,IAAI,CAACmB,CAAD;AAfJ,WAAP;AAiBD;AACF;;AACD,aAAO;AAAEE,QAAAA,KAAK,EAAE,KAAT;AAAgBE,QAAAA,KAAK,EAAE;AAAvB,OAAP;AACD;;;gCAEWhB,E,EAAI;AACd,UAAMP,IAAI,GAAG,KAAKkB,UAAL,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,IAAI,CAACoB,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvC,YAAInB,IAAI,CAACmB,CAAD,CAAJ,CAAQZ,EAAR,KAAeA,EAAnB,EAAuB,OAAOP,IAAI,CAACmB,CAAD,CAAJ,CAAQX,KAAf;AACxB;AACF;;;oCAEeG,M,EAAQ;AACtB,UAAMa,UAAU,GAAG,EAAnB;;AACA,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKnB,IAAL,CAAUoB,MAA9B,EAAsCD,CAAC,IAAI,CAA3C,EAA8C;AAC5C,YAAI,KAAKnB,IAAL,CAAUmB,CAAV,EAAaR,MAAb,KAAwBA,MAA5B,EAAoC;AAClCa,UAAAA,UAAU,CAACC,IAAX,CAAgB,KAAKzB,IAAL,CAAUmB,CAAV,CAAhB;AACD;AACF;;AACD,aAAOK,UAAP;AACD;;;iDAE4Bb,M,EAAQe,Q,EAAUC,Q,EAAU;AACvD,UAAMC,sBAAsB,GAAG,EAA/B;;AACA,WAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKnB,IAAL,CAAUoB,MAA9B,EAAsCD,CAAC,IAAI,CAA3C,EAA8C;AAC5C,YAAMd,GAAG,GAAG,KAAKL,IAAL,CAAUmB,CAAV,CAAZ;;AACA,YAAId,GAAG,CAACM,MAAJ,KAAeA,MAAf,IACCN,GAAG,CAACO,KAAJ,IAAac,QADd,IAECrB,GAAG,CAACO,KAAJ,IAAae,QAFlB,EAE4B;AAC1BC,UAAAA,sBAAsB,CAACH,IAAvB,CAA4B,KAAKzB,IAAL,CAAUmB,CAAV,CAA5B;AACD;AACF;;AACD,aAAOS,sBAAP;AACD;;;4CAEuBjB,M,EAAQkB,K,EAAOnB,K,EAAO;AAC5C,UAAMc,UAAU,GAAG,EAAnB;;AACA,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKnB,IAAL,CAAUoB,MAA9B,EAAsCD,CAAC,IAAI,CAA3C,EAA8C;AAC5C,YAAMd,GAAG,GAAG,KAAKL,IAAL,CAAUmB,CAAV,CAAZ;;AACA,YAAId,GAAG,CAACM,MAAJ,KAAeA,MAAf,IAAyBN,GAAG,CAACwB,KAAD,CAAH,KAAenB,KAA5C,EAAmD;AACjDc,UAAAA,UAAU,CAACC,IAAX,CAAgB,KAAKzB,IAAL,CAAUmB,CAAV,CAAhB;AACD;AACF;;AACD,aAAOK,UAAP;AACD;;;mDAE8Bb,M,EAAQkB,K,EAAOf,Y,EAAc;AAC1D,aAAO,KAAKgB,uBAAL,CAA6BnB,MAA7B,EAAqCkB,KAArC,EAA4Cf,YAA5C,CAAP;AACD;;;;;;+CAGCN,K,EAAOE,K,EAAOC,M,EAAQC,K,EAAOC,K,EAAOC,Y,EAAcC,K,EAAOgB,Q,EAAUC,O,EAASC,U;;;;;;AAE5E,qBAAK/B,SAAL,GAAiB+B,UAAjB;AACMC,gBAAAA,Q,GAAWF,OAAO,CAACf,KAAR,CAAckB,I;;uBACL/C,UAAU,CAACgD,QAAX,CAAoBC,MAApB,CAA2BH,QAA3B,EAAqC;AAC7DI,kBAAAA,MAAM,EAAE9C,OAAO,CAACC,GAAR,CAAY8C,0BADyC;AAE7DC,kBAAAA,YAAY,EAAE;AAF+C,iBAArC,EAGvB,UAACC,GAAD,EAAMC,MAAN;AAAA,yBAAiBA,MAAjB;AAAA,iBAHuB,C;;;AAApBC,gBAAAA,W;AAIAC,gBAAAA,O,GAAU,KAAK5C,IAAL,CAAUoB,M;AACpBb,gBAAAA,E,GAAKqC,OAAO,GAAG,C;AACfvC,gBAAAA,G,GAAM;AACVE,kBAAAA,EAAE,EAAFA,EADU;AAEVC,kBAAAA,KAAK,EAALA,KAFU;AAGVC,kBAAAA,UAAU,EAAEoC,IAAI,CAACC,GAAL,EAHF;AAIVpC,kBAAAA,KAAK,EAALA,KAJU;AAKVC,kBAAAA,MAAM,EAANA,MALU;AAMVC,kBAAAA,KAAK,EAALA,KANU;AAOVC,kBAAAA,KAAK,EAALA,KAPU;AAQVC,kBAAAA,YAAY,EAAZA,YARU;AASVC,kBAAAA,KAAK,EAALA,KATU;AAUVC,kBAAAA,SAAS,EAAEe,QAVD;AAWVd,kBAAAA,KAAK,EAAE0B,WAAW,CAACI;AAXT,iB;AAaZ,qBAAK/C,IAAL,CAAUyB,IAAV,CAAepB,GAAf;iDACO,KAAK2C,UAAL,CAAgBzC,EAAhB,C;;;;;;;;;;;;;;;;;;4BAGD0C,K,EAAOpB,K,EAAOqB,Q,EAAU;AAC9B,UAAMlD,IAAI,GAAG,KAAKkB,UAAL,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,IAAI,CAACoB,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvC,YAAInB,IAAI,CAACmB,CAAD,CAAJ,CAAQZ,EAAR,KAAe0C,KAAnB,EAA0B;AACxB,eAAKjD,IAAL,CAAUmB,CAAV,EAAaU,KAAb,IAAsBqB,QAAtB;AACA,iBAAO/B,CAAP;AACD;AACF;AACF;;;iCAEY8B,K,EAAOE,S,EAAW7B,K,EAAO;AACpC,UAAMH,CAAC,GAAG,KAAKiC,OAAL,CAAaH,KAAb,EAAoB,QAApB,EAA8BE,SAA9B,CAAV;AACA,aAAO;AACL5C,QAAAA,EAAE,EAAE,KAAKP,IAAL,CAAUmB,CAAV,EAAaZ,EADZ;AAELe,QAAAA,KAAK,EAALA,KAFK;AAGLb,QAAAA,UAAU,EAAE,KAAKT,IAAL,CAAUmB,CAAV,EAAaV,UAHpB;AAILK,QAAAA,YAAY,EAAE,KAAKd,IAAL,CAAUmB,CAAV,EAAaL,YAJtB;AAKLC,QAAAA,KAAK,EAAE,KAAKf,IAAL,CAAUmB,CAAV,EAAaJ,KALf;AAMLH,QAAAA,KAAK,EAAE,KAAKZ,IAAL,CAAUmB,CAAV,EAAaP,KANf;AAOLF,QAAAA,KAAK,EAAE,KAAKV,IAAL,CAAUmB,CAAV,EAAaT,KAPf;AAQLC,QAAAA,MAAM,EAAE,KAAKX,IAAL,CAAUmB,CAAV,EAAaR;AARhB,OAAP;AAUD;;;gCAEWsC,K,EAAOI,Q,EAAU/B,K,EAAO;AAClC,UAAMH,CAAC,GAAG,KAAKiC,OAAL,CAAaH,KAAb,EAAoB,OAApB,EAA6BI,QAA7B,CAAV;AACA,aAAO;AACL9C,QAAAA,EAAE,EAAE,KAAKP,IAAL,CAAUmB,CAAV,EAAaZ,EADZ;AAELe,QAAAA,KAAK,EAALA,KAFK;AAGLb,QAAAA,UAAU,EAAE,KAAKT,IAAL,CAAUmB,CAAV,EAAaV,UAHpB;AAILK,QAAAA,YAAY,EAAE,KAAKd,IAAL,CAAUmB,CAAV,EAAaL,YAJtB;AAKLC,QAAAA,KAAK,EAAE,KAAKf,IAAL,CAAUmB,CAAV,EAAaJ,KALf;AAMLH,QAAAA,KAAK,EAAE,KAAKZ,IAAL,CAAUmB,CAAV,EAAaP,KANf;AAOLF,QAAAA,KAAK,EAAE,KAAKV,IAAL,CAAUmB,CAAV,EAAaT,KAPf;AAQLC,QAAAA,MAAM,EAAE,KAAKX,IAAL,CAAUmB,CAAV,EAAaR;AARhB,OAAP;AAUD;;;4BAEMJ,E,EAAI;AACT,WAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKnB,IAAL,CAAUoB,MAA9B,EAAsCD,CAAC,IAAI,CAA3C,EAA8C;AAC5C,YAAI,KAAKnB,IAAL,CAAUmB,CAAV,EAAaZ,EAAb,KAAoBA,EAAxB,EAA4B;AAC1B,eAAKP,IAAL,CAAUsD,MAAV,CAAiBnC,CAAjB,EAAoB,CAApB;AACA;AACD;AACF;AACF;;;;;;eAGY,IAAIpB,WAAJ,E","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable consistent-return */\r\nimport cloudiner from 'cloudinary';\r\nimport dotenv from 'dotenv';\r\nimport Cars from '../models/Cars';\r\nimport carsData from '../database/cars';\r\n\r\ndotenv.config();\r\nconst cloudinary = cloudiner.v2;\r\n// cloudinary configuration\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nclass CarsService {\r\n  constructor() {\r\n    this.cars = carsData;\r\n    this.userEmail = null;\r\n  }\r\n\r\n  getAllCars() {\r\n    return this.cars.map((data) => {\r\n      const car = new Cars();\r\n      car.id = data.id;\r\n      car.owner = data.owner;\r\n      car.created_on = data.created_on;\r\n      car.state = data.state;\r\n      car.status = data.status;\r\n      car.price = data.price;\r\n      car.title = data.title;\r\n      car.manufacturer = data.manufacturer;\r\n      car.model = data.model;\r\n      car.body_type = data.body_type;\r\n      car.photo = data.photo;\r\n      return car;\r\n    });\r\n  }\r\n\r\n  getCarById(id) {\r\n    const cars = this.getAllCars();\r\n    for (let i = 0; i < cars.length; i += 1) {\r\n      if (cars[i].id === id) {\r\n        return {\r\n          exist: true,\r\n          data: {\r\n            id: cars[i].id,\r\n            email: this.userEmail,\r\n            created_on: cars[i].created_on,\r\n            manufacturer: cars[i].manufacturer,\r\n            model: cars[i].model,\r\n            body_type: cars[i].body_type,\r\n            state: cars[i].state,\r\n            status: cars[i].status,\r\n            price: cars[i].price,\r\n            title: cars[i].title,\r\n            photo: cars[i].photo,\r\n          },\r\n          car: cars[i],\r\n        };\r\n      }\r\n    }\r\n    return { exist: false, error: 'no such car with this id.' };\r\n  }\r\n\r\n  getCarOwner(id) {\r\n    const cars = this.getAllCars();\r\n    for (let i = 0; i < cars.length; i += 1) {\r\n      if (cars[i].id === id) return cars[i].owner;\r\n    }\r\n  }\r\n\r\n  getCarsByStatus(status) {\r\n    const unsoldCars = [];\r\n    for (let i = 0; i < this.cars.length; i += 1) {\r\n      if (this.cars[i].status === status) {\r\n        unsoldCars.push(this.cars[i]);\r\n      }\r\n    }\r\n    return unsoldCars;\r\n  }\r\n\r\n  getCarsByStatusAndPriceRange(status, minPrice, maxPrice) {\r\n    const unsoldCarsInPriceRange = [];\r\n    for (let i = 0; i < this.cars.length; i += 1) {\r\n      const car = this.cars[i];\r\n      if (car.status === status\r\n        && car.price >= minPrice\r\n        && car.price <= maxPrice) {\r\n        unsoldCarsInPriceRange.push(this.cars[i]);\r\n      }\r\n    }\r\n    return unsoldCarsInPriceRange;\r\n  }\r\n\r\n  getCarsByStatusAndState(status, field, state) {\r\n    const unsoldCars = [];\r\n    for (let i = 0; i < this.cars.length; i += 1) {\r\n      const car = this.cars[i];\r\n      if (car.status === status && car[field] === state) {\r\n        unsoldCars.push(this.cars[i]);\r\n      }\r\n    }\r\n    return unsoldCars;\r\n  }\r\n\r\n  getCarsByStatusAndManufacturer(status, field, manufacturer) {\r\n    return this.getCarsByStatusAndState(status, field, manufacturer);\r\n  }\r\n\r\n  async createAdvert(\r\n    owner, state, status, price, title, manufacturer, model, bodyType, myPhoto, ownerEmail,\r\n  ) {\r\n    this.userEmail = ownerEmail;\r\n    const filePath = myPhoto.photo.path;\r\n    const uploadedImg = await cloudinary.uploader.upload(filePath, {\r\n      folder: process.env.CLOUDINARY_AUTOMART_FOLDER,\r\n      use_filename: true,\r\n    }, (err, result) => result);\r\n    const allCars = this.cars.length;\r\n    const id = allCars + 1;\r\n    const car = {\r\n      id,\r\n      owner,\r\n      created_on: Date.now(),\r\n      state,\r\n      status,\r\n      price,\r\n      title,\r\n      manufacturer,\r\n      model,\r\n      body_type: bodyType,\r\n      photo: uploadedImg.url,\r\n    };\r\n    this.cars.push(car);\r\n    return this.getCarById(id);\r\n  }\r\n\r\n  updater(carId, field, newField) {\r\n    const cars = this.getAllCars();\r\n    for (let i = 0; i < cars.length; i += 1) {\r\n      if (cars[i].id === carId) {\r\n        this.cars[i][field] = newField;\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateStatus(carId, newStatus, email) {\r\n    const i = this.updater(carId, 'status', newStatus);\r\n    return {\r\n      id: this.cars[i].id,\r\n      email,\r\n      created_on: this.cars[i].created_on,\r\n      manufacturer: this.cars[i].manufacturer,\r\n      model: this.cars[i].model,\r\n      price: this.cars[i].price,\r\n      state: this.cars[i].state,\r\n      status: this.cars[i].status,\r\n    };\r\n  }\r\n\r\n  updatePrice(carId, newPrice, email) {\r\n    const i = this.updater(carId, 'price', newPrice);\r\n    return {\r\n      id: this.cars[i].id,\r\n      email,\r\n      created_on: this.cars[i].created_on,\r\n      manufacturer: this.cars[i].manufacturer,\r\n      model: this.cars[i].model,\r\n      price: this.cars[i].price,\r\n      state: this.cars[i].state,\r\n      status: this.cars[i].status,\r\n    };\r\n  }\r\n\r\n  delete(id) {\r\n    for (let i = 0; i < this.cars.length; i += 1) {\r\n      if (this.cars[i].id === id) {\r\n        this.cars.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CarsService();\r\n"],"file":"CarsService.js"}